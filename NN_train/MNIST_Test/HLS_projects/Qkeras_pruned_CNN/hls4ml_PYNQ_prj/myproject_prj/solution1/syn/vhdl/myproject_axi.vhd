-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of myproject_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_axi,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.325000,HLS_SYN_LAT=66676,HLS_SYN_TPT=none,HLS_SYN_MEM=245,HLS_SYN_DSP=125,HLS_SYN_FF=50421,HLS_SYN_LUT=49461,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_V_ce0 : STD_LOGIC;
    signal in_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_V_ce0 : STD_LOGIC;
    signal out_V_we0 : STD_LOGIC;
    signal i_fu_268_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_421 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln21_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctype_data_V_reg_431 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_data_V_0_reg_436 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal out_local_V_data_0_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_0_V_empty_n : STD_LOGIC;
    signal out_local_V_data_0_V_read : STD_LOGIC;
    signal out_local_V_data_1_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_1_V_empty_n : STD_LOGIC;
    signal out_local_V_data_1_V_read : STD_LOGIC;
    signal out_local_V_data_2_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_2_V_empty_n : STD_LOGIC;
    signal out_local_V_data_2_V_read : STD_LOGIC;
    signal out_local_V_data_3_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_3_V_empty_n : STD_LOGIC;
    signal out_local_V_data_3_V_read : STD_LOGIC;
    signal out_local_V_data_4_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_4_V_empty_n : STD_LOGIC;
    signal out_local_V_data_4_V_read : STD_LOGIC;
    signal out_local_V_data_5_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_5_V_empty_n : STD_LOGIC;
    signal out_local_V_data_5_V_read : STD_LOGIC;
    signal out_local_V_data_6_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_6_V_empty_n : STD_LOGIC;
    signal out_local_V_data_6_V_read : STD_LOGIC;
    signal out_local_V_data_7_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_7_V_empty_n : STD_LOGIC;
    signal out_local_V_data_7_V_read : STD_LOGIC;
    signal out_local_V_data_8_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_8_V_empty_n : STD_LOGIC;
    signal out_local_V_data_8_V_read : STD_LOGIC;
    signal out_local_V_data_9_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_V_data_9_V_empty_n : STD_LOGIC;
    signal out_local_V_data_9_V_read : STD_LOGIC;
    signal io_acc_block_signal_op64 : STD_LOGIC;
    signal tmp_data_V_1_reg_441 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_2_reg_446 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_3_reg_451 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_4_reg_456 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_5_reg_461 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_6_reg_466 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_7_reg_471 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_8_reg_476 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_98_reg_481 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_325_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_489 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_fu_331_p12 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_494 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln34_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_myproject_fu_227_layer0_V_data_V_read : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_0_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_0_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_1_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_1_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_2_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_2_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_3_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_3_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_4_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_4_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_5_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_5_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_6_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_6_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_7_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_7_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_8_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_8_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_layer12_out_V_data_9_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_227_layer12_out_V_data_9_V_write : STD_LOGIC;
    signal grp_myproject_fu_227_ap_start : STD_LOGIC;
    signal grp_myproject_fu_227_ap_done : STD_LOGIC;
    signal grp_myproject_fu_227_ap_ready : STD_LOGIC;
    signal grp_myproject_fu_227_ap_idle : STD_LOGIC;
    signal grp_myproject_fu_227_ap_continue : STD_LOGIC;
    signal i_0_reg_204 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal in_local_V_data_0_V_full_n : STD_LOGIC;
    signal in_local_V_data_0_V_write : STD_LOGIC;
    signal j3_0_reg_215 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_myproject_fu_227_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_sync_grp_myproject_fu_227_ap_ready : STD_LOGIC;
    signal ap_sync_grp_myproject_fu_227_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_myproject_fu_227_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_myproject_fu_227_ap_done : STD_LOGIC := '0';
    signal in_local_V_data_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal in_local_V_data_0_V_empty_n : STD_LOGIC;
    signal in_local_V_data_0_V_read : STD_LOGIC;
    signal out_local_V_data_0_V_full_n : STD_LOGIC;
    signal out_local_V_data_0_V_write : STD_LOGIC;
    signal out_local_V_data_1_V_full_n : STD_LOGIC;
    signal out_local_V_data_1_V_write : STD_LOGIC;
    signal out_local_V_data_2_V_full_n : STD_LOGIC;
    signal out_local_V_data_2_V_write : STD_LOGIC;
    signal out_local_V_data_3_V_full_n : STD_LOGIC;
    signal out_local_V_data_3_V_write : STD_LOGIC;
    signal out_local_V_data_4_V_full_n : STD_LOGIC;
    signal out_local_V_data_4_V_write : STD_LOGIC;
    signal out_local_V_data_5_V_full_n : STD_LOGIC;
    signal out_local_V_data_5_V_write : STD_LOGIC;
    signal out_local_V_data_6_V_full_n : STD_LOGIC;
    signal out_local_V_data_6_V_write : STD_LOGIC;
    signal out_local_V_data_7_V_full_n : STD_LOGIC;
    signal out_local_V_data_7_V_write : STD_LOGIC;
    signal out_local_V_data_8_V_full_n : STD_LOGIC;
    signal out_local_V_data_8_V_write : STD_LOGIC;
    signal out_local_V_data_9_V_full_n : STD_LOGIC;
    signal out_local_V_data_9_V_write : STD_LOGIC;
    signal zext_ln25_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component myproject IS
    port (
        layer0_V_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        layer0_V_data_V_empty_n : IN STD_LOGIC;
        layer0_V_data_V_read : OUT STD_LOGIC;
        layer12_out_V_data_0_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_0_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_0_V_write : OUT STD_LOGIC;
        layer12_out_V_data_1_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_1_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_1_V_write : OUT STD_LOGIC;
        layer12_out_V_data_2_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_2_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_2_V_write : OUT STD_LOGIC;
        layer12_out_V_data_3_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_3_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_3_V_write : OUT STD_LOGIC;
        layer12_out_V_data_4_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_4_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_4_V_write : OUT STD_LOGIC;
        layer12_out_V_data_5_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_5_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_5_V_write : OUT STD_LOGIC;
        layer12_out_V_data_6_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_6_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_6_V_write : OUT STD_LOGIC;
        layer12_out_V_data_7_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_7_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_7_V_write : OUT STD_LOGIC;
        layer12_out_V_data_8_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_8_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_8_V_write : OUT STD_LOGIC;
        layer12_out_V_data_9_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        layer12_out_V_data_9_V_full_n : IN STD_LOGIC;
        layer12_out_V_data_9_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component myproject_axi_mux_104_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fifo_w8_d784_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component myproject_axi_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in_V_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        in_V_ce0 : IN STD_LOGIC;
        in_V_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        out_V_ce0 : IN STD_LOGIC;
        out_V_we0 : IN STD_LOGIC;
        out_V_d0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    myproject_axi_AXILiteS_s_axi_U : component myproject_axi_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in_V_address0 => in_V_address0,
        in_V_ce0 => in_V_ce0,
        in_V_q0 => in_V_q0,
        out_V_address0 => out_V_address0,
        out_V_ce0 => out_V_ce0,
        out_V_we0 => out_V_we0,
        out_V_d0 => tmp_reg_494);

    grp_myproject_fu_227 : component myproject
    port map (
        layer0_V_data_V_dout => in_local_V_data_0_V_dout,
        layer0_V_data_V_empty_n => in_local_V_data_0_V_empty_n,
        layer0_V_data_V_read => grp_myproject_fu_227_layer0_V_data_V_read,
        layer12_out_V_data_0_V_din => grp_myproject_fu_227_layer12_out_V_data_0_V_din,
        layer12_out_V_data_0_V_full_n => out_local_V_data_0_V_full_n,
        layer12_out_V_data_0_V_write => grp_myproject_fu_227_layer12_out_V_data_0_V_write,
        layer12_out_V_data_1_V_din => grp_myproject_fu_227_layer12_out_V_data_1_V_din,
        layer12_out_V_data_1_V_full_n => out_local_V_data_1_V_full_n,
        layer12_out_V_data_1_V_write => grp_myproject_fu_227_layer12_out_V_data_1_V_write,
        layer12_out_V_data_2_V_din => grp_myproject_fu_227_layer12_out_V_data_2_V_din,
        layer12_out_V_data_2_V_full_n => out_local_V_data_2_V_full_n,
        layer12_out_V_data_2_V_write => grp_myproject_fu_227_layer12_out_V_data_2_V_write,
        layer12_out_V_data_3_V_din => grp_myproject_fu_227_layer12_out_V_data_3_V_din,
        layer12_out_V_data_3_V_full_n => out_local_V_data_3_V_full_n,
        layer12_out_V_data_3_V_write => grp_myproject_fu_227_layer12_out_V_data_3_V_write,
        layer12_out_V_data_4_V_din => grp_myproject_fu_227_layer12_out_V_data_4_V_din,
        layer12_out_V_data_4_V_full_n => out_local_V_data_4_V_full_n,
        layer12_out_V_data_4_V_write => grp_myproject_fu_227_layer12_out_V_data_4_V_write,
        layer12_out_V_data_5_V_din => grp_myproject_fu_227_layer12_out_V_data_5_V_din,
        layer12_out_V_data_5_V_full_n => out_local_V_data_5_V_full_n,
        layer12_out_V_data_5_V_write => grp_myproject_fu_227_layer12_out_V_data_5_V_write,
        layer12_out_V_data_6_V_din => grp_myproject_fu_227_layer12_out_V_data_6_V_din,
        layer12_out_V_data_6_V_full_n => out_local_V_data_6_V_full_n,
        layer12_out_V_data_6_V_write => grp_myproject_fu_227_layer12_out_V_data_6_V_write,
        layer12_out_V_data_7_V_din => grp_myproject_fu_227_layer12_out_V_data_7_V_din,
        layer12_out_V_data_7_V_full_n => out_local_V_data_7_V_full_n,
        layer12_out_V_data_7_V_write => grp_myproject_fu_227_layer12_out_V_data_7_V_write,
        layer12_out_V_data_8_V_din => grp_myproject_fu_227_layer12_out_V_data_8_V_din,
        layer12_out_V_data_8_V_full_n => out_local_V_data_8_V_full_n,
        layer12_out_V_data_8_V_write => grp_myproject_fu_227_layer12_out_V_data_8_V_write,
        layer12_out_V_data_9_V_din => grp_myproject_fu_227_layer12_out_V_data_9_V_din,
        layer12_out_V_data_9_V_full_n => out_local_V_data_9_V_full_n,
        layer12_out_V_data_9_V_write => grp_myproject_fu_227_layer12_out_V_data_9_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_myproject_fu_227_ap_start,
        ap_done => grp_myproject_fu_227_ap_done,
        ap_ready => grp_myproject_fu_227_ap_ready,
        ap_idle => grp_myproject_fu_227_ap_idle,
        ap_continue => grp_myproject_fu_227_ap_continue);

    myproject_axi_mux_104_16_1_1_U1203 : component myproject_axi_mux_104_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_data_V_0_reg_436,
        din1 => tmp_data_V_1_reg_441,
        din2 => tmp_data_V_2_reg_446,
        din3 => tmp_data_V_3_reg_451,
        din4 => tmp_data_V_4_reg_456,
        din5 => tmp_data_V_5_reg_461,
        din6 => tmp_data_V_6_reg_466,
        din7 => tmp_data_V_7_reg_471,
        din8 => tmp_data_V_8_reg_476,
        din9 => tmp_data_V_98_reg_481,
        din10 => j3_0_reg_215,
        dout => tmp_fu_331_p12);

    in_local_V_data_0_V_fifo_U : component fifo_w8_d784_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ctype_data_V_reg_431,
        if_full_n => in_local_V_data_0_V_full_n,
        if_write => in_local_V_data_0_V_write,
        if_dout => in_local_V_data_0_V_dout,
        if_empty_n => in_local_V_data_0_V_empty_n,
        if_read => in_local_V_data_0_V_read);

    out_local_V_data_0_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_0_V_din,
        if_full_n => out_local_V_data_0_V_full_n,
        if_write => out_local_V_data_0_V_write,
        if_dout => out_local_V_data_0_V_dout,
        if_empty_n => out_local_V_data_0_V_empty_n,
        if_read => out_local_V_data_0_V_read);

    out_local_V_data_1_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_1_V_din,
        if_full_n => out_local_V_data_1_V_full_n,
        if_write => out_local_V_data_1_V_write,
        if_dout => out_local_V_data_1_V_dout,
        if_empty_n => out_local_V_data_1_V_empty_n,
        if_read => out_local_V_data_1_V_read);

    out_local_V_data_2_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_2_V_din,
        if_full_n => out_local_V_data_2_V_full_n,
        if_write => out_local_V_data_2_V_write,
        if_dout => out_local_V_data_2_V_dout,
        if_empty_n => out_local_V_data_2_V_empty_n,
        if_read => out_local_V_data_2_V_read);

    out_local_V_data_3_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_3_V_din,
        if_full_n => out_local_V_data_3_V_full_n,
        if_write => out_local_V_data_3_V_write,
        if_dout => out_local_V_data_3_V_dout,
        if_empty_n => out_local_V_data_3_V_empty_n,
        if_read => out_local_V_data_3_V_read);

    out_local_V_data_4_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_4_V_din,
        if_full_n => out_local_V_data_4_V_full_n,
        if_write => out_local_V_data_4_V_write,
        if_dout => out_local_V_data_4_V_dout,
        if_empty_n => out_local_V_data_4_V_empty_n,
        if_read => out_local_V_data_4_V_read);

    out_local_V_data_5_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_5_V_din,
        if_full_n => out_local_V_data_5_V_full_n,
        if_write => out_local_V_data_5_V_write,
        if_dout => out_local_V_data_5_V_dout,
        if_empty_n => out_local_V_data_5_V_empty_n,
        if_read => out_local_V_data_5_V_read);

    out_local_V_data_6_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_6_V_din,
        if_full_n => out_local_V_data_6_V_full_n,
        if_write => out_local_V_data_6_V_write,
        if_dout => out_local_V_data_6_V_dout,
        if_empty_n => out_local_V_data_6_V_empty_n,
        if_read => out_local_V_data_6_V_read);

    out_local_V_data_7_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_7_V_din,
        if_full_n => out_local_V_data_7_V_full_n,
        if_write => out_local_V_data_7_V_write,
        if_dout => out_local_V_data_7_V_dout,
        if_empty_n => out_local_V_data_7_V_empty_n,
        if_read => out_local_V_data_7_V_read);

    out_local_V_data_8_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_8_V_din,
        if_full_n => out_local_V_data_8_V_full_n,
        if_write => out_local_V_data_8_V_write,
        if_dout => out_local_V_data_8_V_dout,
        if_empty_n => out_local_V_data_8_V_empty_n,
        if_read => out_local_V_data_8_V_read);

    out_local_V_data_9_V_fifo_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_myproject_fu_227_layer12_out_V_data_9_V_din,
        if_full_n => out_local_V_data_9_V_full_n,
        if_write => out_local_V_data_9_V_write,
        if_dout => out_local_V_data_9_V_dout,
        if_empty_n => out_local_V_data_9_V_empty_n,
        if_read => out_local_V_data_9_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_myproject_fu_227_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_myproject_fu_227_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_myproject_fu_227_ap_done <= ap_const_logic_0;
                elsif ((grp_myproject_fu_227_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_myproject_fu_227_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_myproject_fu_227_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_myproject_fu_227_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_sync_reg_grp_myproject_fu_227_ap_ready <= ap_const_logic_0;
                elsif ((grp_myproject_fu_227_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_myproject_fu_227_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_myproject_fu_227_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_myproject_fu_227_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln21_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_sync_grp_myproject_fu_227_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_myproject_fu_227_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_myproject_fu_227_ap_ready = ap_const_logic_1)) then 
                    grp_myproject_fu_227_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_204 <= i_reg_421;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_204 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j3_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j3_0_reg_215 <= j_reg_489;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
                j3_0_reg_215 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ctype_data_V_reg_431 <= in_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_421 <= i_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_reg_489 <= j_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then
                tmp_data_V_0_reg_436 <= out_local_V_data_0_V_dout;
                tmp_data_V_1_reg_441 <= out_local_V_data_1_V_dout;
                tmp_data_V_2_reg_446 <= out_local_V_data_2_V_dout;
                tmp_data_V_3_reg_451 <= out_local_V_data_3_V_dout;
                tmp_data_V_4_reg_456 <= out_local_V_data_4_V_dout;
                tmp_data_V_5_reg_461 <= out_local_V_data_5_V_dout;
                tmp_data_V_6_reg_466 <= out_local_V_data_6_V_dout;
                tmp_data_V_7_reg_471 <= out_local_V_data_7_V_dout;
                tmp_data_V_8_reg_476 <= out_local_V_data_8_V_dout;
                tmp_data_V_98_reg_481 <= out_local_V_data_9_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_reg_494 <= tmp_fu_331_p12;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, icmp_ln21_fu_262_p2, ap_CS_fsm_state6, io_acc_block_signal_op64, ap_CS_fsm_state7, icmp_ln34_fu_319_p2, ap_CS_fsm_state4, in_local_V_data_0_V_full_n, ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln21_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln34_fu_319_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_myproject_fu_227_ap_ready, ap_sync_grp_myproject_fu_227_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_myproject_fu_227_ap_ready and ap_sync_grp_myproject_fu_227_ap_done) = ap_const_logic_0);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_myproject_fu_227_ap_done <= (grp_myproject_fu_227_ap_done or ap_sync_reg_grp_myproject_fu_227_ap_done);
    ap_sync_grp_myproject_fu_227_ap_ready <= (grp_myproject_fu_227_ap_ready or ap_sync_reg_grp_myproject_fu_227_ap_ready);

    grp_myproject_fu_227_ap_continue_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_myproject_fu_227_ap_continue <= ap_const_logic_1;
        else 
            grp_myproject_fu_227_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_myproject_fu_227_ap_start <= grp_myproject_fu_227_ap_start_reg;
    i_fu_268_p2 <= std_logic_vector(unsigned(i_0_reg_204) + unsigned(ap_const_lv10_1));
    icmp_ln21_fu_262_p2 <= "1" when (i_0_reg_204 = ap_const_lv10_310) else "0";
    icmp_ln34_fu_319_p2 <= "1" when (j3_0_reg_215 = ap_const_lv4_A) else "0";
    in_V_address0 <= zext_ln25_fu_274_p1(10 - 1 downto 0);

    in_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_local_V_data_0_V_read_assign_proc : process(grp_myproject_fu_227_layer0_V_data_V_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_local_V_data_0_V_read <= grp_myproject_fu_227_layer0_V_data_V_read;
        else 
            in_local_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_local_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state4, in_local_V_data_0_V_full_n)
    begin
        if (((in_local_V_data_0_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in_local_V_data_0_V_write <= ap_const_logic_1;
        else 
            in_local_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op64 <= (out_local_V_data_9_V_empty_n and out_local_V_data_8_V_empty_n and out_local_V_data_7_V_empty_n and out_local_V_data_6_V_empty_n and out_local_V_data_5_V_empty_n and out_local_V_data_4_V_empty_n and out_local_V_data_3_V_empty_n and out_local_V_data_2_V_empty_n and out_local_V_data_1_V_empty_n and out_local_V_data_0_V_empty_n);
    j_fu_325_p2 <= std_logic_vector(unsigned(j3_0_reg_215) + unsigned(ap_const_lv4_1));
    out_V_address0 <= zext_ln35_fu_347_p1(4 - 1 downto 0);

    out_V_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_0_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_0_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_0_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_0_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_0_V_write <= grp_myproject_fu_227_layer12_out_V_data_0_V_write;
        else 
            out_local_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_1_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_1_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_1_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_1_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_1_V_write <= grp_myproject_fu_227_layer12_out_V_data_1_V_write;
        else 
            out_local_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_2_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_2_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_2_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_2_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_2_V_write <= grp_myproject_fu_227_layer12_out_V_data_2_V_write;
        else 
            out_local_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_3_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_3_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_3_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_3_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_3_V_write <= grp_myproject_fu_227_layer12_out_V_data_3_V_write;
        else 
            out_local_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_4_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_4_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_4_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_4_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_4_V_write <= grp_myproject_fu_227_layer12_out_V_data_4_V_write;
        else 
            out_local_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_5_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_5_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_5_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_5_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_5_V_write <= grp_myproject_fu_227_layer12_out_V_data_5_V_write;
        else 
            out_local_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_6_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_6_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_6_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_6_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_6_V_write <= grp_myproject_fu_227_layer12_out_V_data_6_V_write;
        else 
            out_local_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_7_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_7_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_7_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_7_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_7_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_7_V_write <= grp_myproject_fu_227_layer12_out_V_data_7_V_write;
        else 
            out_local_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_8_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_8_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_8_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_8_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_8_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_8_V_write <= grp_myproject_fu_227_layer12_out_V_data_8_V_write;
        else 
            out_local_V_data_8_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_9_V_read_assign_proc : process(ap_CS_fsm_state6, io_acc_block_signal_op64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (io_acc_block_signal_op64 = ap_const_logic_1))) then 
            out_local_V_data_9_V_read <= ap_const_logic_1;
        else 
            out_local_V_data_9_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_local_V_data_9_V_write_assign_proc : process(grp_myproject_fu_227_layer12_out_V_data_9_V_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_local_V_data_9_V_write <= grp_myproject_fu_227_layer12_out_V_data_9_V_write;
        else 
            out_local_V_data_9_V_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln25_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_204),64));
    zext_ln35_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_0_reg_215),64));
end behav;
