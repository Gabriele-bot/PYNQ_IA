// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_stable_array_array_softmax_config12_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        data_V_data_4_V_dout,
        data_V_data_4_V_empty_n,
        data_V_data_4_V_read,
        data_V_data_5_V_dout,
        data_V_data_5_V_empty_n,
        data_V_data_5_V_read,
        data_V_data_6_V_dout,
        data_V_data_6_V_empty_n,
        data_V_data_6_V_read,
        data_V_data_7_V_dout,
        data_V_data_7_V_empty_n,
        data_V_data_7_V_read,
        data_V_data_8_V_dout,
        data_V_data_8_V_empty_n,
        data_V_data_8_V_read,
        data_V_data_9_V_dout,
        data_V_data_9_V_empty_n,
        data_V_data_9_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write,
        res_V_data_4_V_din,
        res_V_data_4_V_full_n,
        res_V_data_4_V_write,
        res_V_data_5_V_din,
        res_V_data_5_V_full_n,
        res_V_data_5_V_write,
        res_V_data_6_V_din,
        res_V_data_6_V_full_n,
        res_V_data_6_V_write,
        res_V_data_7_V_din,
        res_V_data_7_V_full_n,
        res_V_data_7_V_write,
        res_V_data_8_V_din,
        res_V_data_8_V_full_n,
        res_V_data_8_V_write,
        res_V_data_9_V_din,
        res_V_data_9_V_full_n,
        res_V_data_9_V_write,
        data_V_data_0_V_blk_n,
        data_V_data_1_V_blk_n,
        data_V_data_2_V_blk_n,
        data_V_data_3_V_blk_n,
        data_V_data_4_V_blk_n,
        data_V_data_5_V_blk_n,
        data_V_data_6_V_blk_n,
        data_V_data_7_V_blk_n,
        data_V_data_8_V_blk_n,
        data_V_data_9_V_blk_n,
        res_V_data_0_V_blk_n,
        res_V_data_1_V_blk_n,
        res_V_data_2_V_blk_n,
        res_V_data_3_V_blk_n,
        res_V_data_4_V_blk_n,
        res_V_data_5_V_blk_n,
        res_V_data_6_V_blk_n,
        res_V_data_7_V_blk_n,
        res_V_data_8_V_blk_n,
        res_V_data_9_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [15:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [15:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [15:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
input  [15:0] data_V_data_4_V_dout;
input   data_V_data_4_V_empty_n;
output   data_V_data_4_V_read;
input  [15:0] data_V_data_5_V_dout;
input   data_V_data_5_V_empty_n;
output   data_V_data_5_V_read;
input  [15:0] data_V_data_6_V_dout;
input   data_V_data_6_V_empty_n;
output   data_V_data_6_V_read;
input  [15:0] data_V_data_7_V_dout;
input   data_V_data_7_V_empty_n;
output   data_V_data_7_V_read;
input  [15:0] data_V_data_8_V_dout;
input   data_V_data_8_V_empty_n;
output   data_V_data_8_V_read;
input  [15:0] data_V_data_9_V_dout;
input   data_V_data_9_V_empty_n;
output   data_V_data_9_V_read;
output  [15:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [15:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [15:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [15:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;
output  [15:0] res_V_data_4_V_din;
input   res_V_data_4_V_full_n;
output   res_V_data_4_V_write;
output  [15:0] res_V_data_5_V_din;
input   res_V_data_5_V_full_n;
output   res_V_data_5_V_write;
output  [15:0] res_V_data_6_V_din;
input   res_V_data_6_V_full_n;
output   res_V_data_6_V_write;
output  [15:0] res_V_data_7_V_din;
input   res_V_data_7_V_full_n;
output   res_V_data_7_V_write;
output  [15:0] res_V_data_8_V_din;
input   res_V_data_8_V_full_n;
output   res_V_data_8_V_write;
output  [15:0] res_V_data_9_V_din;
input   res_V_data_9_V_full_n;
output   res_V_data_9_V_write;
output   data_V_data_0_V_blk_n;
output   data_V_data_1_V_blk_n;
output   data_V_data_2_V_blk_n;
output   data_V_data_3_V_blk_n;
output   data_V_data_4_V_blk_n;
output   data_V_data_5_V_blk_n;
output   data_V_data_6_V_blk_n;
output   data_V_data_7_V_blk_n;
output   data_V_data_8_V_blk_n;
output   data_V_data_9_V_blk_n;
output   res_V_data_0_V_blk_n;
output   res_V_data_1_V_blk_n;
output   res_V_data_2_V_blk_n;
output   res_V_data_3_V_blk_n;
output   res_V_data_4_V_blk_n;
output   res_V_data_5_V_blk_n;
output   res_V_data_6_V_blk_n;
output   res_V_data_7_V_blk_n;
output   res_V_data_8_V_blk_n;
output   res_V_data_9_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg data_V_data_4_V_read;
reg data_V_data_5_V_read;
reg data_V_data_6_V_read;
reg data_V_data_7_V_read;
reg data_V_data_8_V_read;
reg data_V_data_9_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;
reg res_V_data_4_V_write;
reg res_V_data_5_V_write;
reg res_V_data_6_V_write;
reg res_V_data_7_V_write;
reg res_V_data_8_V_write;
reg res_V_data_9_V_write;
reg data_V_data_0_V_blk_n;
reg data_V_data_1_V_blk_n;
reg data_V_data_2_V_blk_n;
reg data_V_data_3_V_blk_n;
reg data_V_data_4_V_blk_n;
reg data_V_data_5_V_blk_n;
reg data_V_data_6_V_blk_n;
reg data_V_data_7_V_blk_n;
reg data_V_data_8_V_blk_n;
reg data_V_data_9_V_blk_n;
reg res_V_data_0_V_blk_n;
reg res_V_data_1_V_blk_n;
reg res_V_data_2_V_blk_n;
reg res_V_data_3_V_blk_n;
reg res_V_data_4_V_blk_n;
reg res_V_data_5_V_blk_n;
reg res_V_data_6_V_blk_n;
reg res_V_data_7_V_blk_n;
reg res_V_data_8_V_blk_n;
reg res_V_data_9_V_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op17;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    io_acc_block_signal_op326;
reg    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table8_address0;
reg    exp_table8_ce0;
wire   [11:0] exp_table8_q0;
wire   [9:0] exp_table8_address1;
reg    exp_table8_ce1;
wire   [11:0] exp_table8_q1;
wire   [9:0] exp_table8_address2;
reg    exp_table8_ce2;
wire   [11:0] exp_table8_q2;
wire   [9:0] exp_table8_address3;
reg    exp_table8_ce3;
wire   [11:0] exp_table8_q3;
wire   [9:0] exp_table8_address4;
reg    exp_table8_ce4;
wire   [11:0] exp_table8_q4;
wire   [9:0] exp_table8_address5;
reg    exp_table8_ce5;
wire   [11:0] exp_table8_q5;
wire   [9:0] exp_table8_address6;
reg    exp_table8_ce6;
wire   [11:0] exp_table8_q6;
wire   [9:0] exp_table8_address7;
reg    exp_table8_ce7;
wire   [11:0] exp_table8_q7;
wire   [9:0] exp_table8_address8;
reg    exp_table8_ce8;
wire   [11:0] exp_table8_q8;
wire   [9:0] exp_table8_address9;
reg    exp_table8_ce9;
wire   [11:0] exp_table8_q9;
wire   [9:0] invert_table9_address0;
reg    invert_table9_ce0;
wire   [11:0] invert_table9_q0;
reg  signed [15:0] data_array_0_V_reg_1947;
reg  signed [15:0] data_array_0_V_reg_1947_pp0_iter1_reg;
reg  signed [15:0] data_array_0_V_reg_1947_pp0_iter2_reg;
reg  signed [15:0] data_array_0_V_reg_1947_pp0_iter3_reg;
reg  signed [15:0] data_array_0_V_reg_1947_pp0_iter4_reg;
reg  signed [15:0] data_array_1_V_reg_1954;
reg  signed [15:0] data_array_1_V_reg_1954_pp0_iter1_reg;
reg  signed [15:0] data_array_1_V_reg_1954_pp0_iter2_reg;
reg  signed [15:0] data_array_1_V_reg_1954_pp0_iter3_reg;
reg  signed [15:0] data_array_1_V_reg_1954_pp0_iter4_reg;
reg  signed [15:0] data_array_2_V_reg_1961;
reg  signed [15:0] data_array_2_V_reg_1961_pp0_iter1_reg;
reg  signed [15:0] data_array_2_V_reg_1961_pp0_iter2_reg;
reg  signed [15:0] data_array_2_V_reg_1961_pp0_iter3_reg;
reg  signed [15:0] data_array_2_V_reg_1961_pp0_iter4_reg;
reg  signed [15:0] data_array_3_V_reg_1968;
reg  signed [15:0] data_array_3_V_reg_1968_pp0_iter1_reg;
reg  signed [15:0] data_array_3_V_reg_1968_pp0_iter2_reg;
reg  signed [15:0] data_array_3_V_reg_1968_pp0_iter3_reg;
reg  signed [15:0] data_array_3_V_reg_1968_pp0_iter4_reg;
reg  signed [15:0] data_array_4_V_reg_1975;
reg  signed [15:0] data_array_4_V_reg_1975_pp0_iter1_reg;
reg  signed [15:0] data_array_4_V_reg_1975_pp0_iter2_reg;
reg  signed [15:0] data_array_4_V_reg_1975_pp0_iter3_reg;
reg  signed [15:0] data_array_4_V_reg_1975_pp0_iter4_reg;
reg  signed [15:0] data_array_5_V_reg_1982;
reg  signed [15:0] data_array_5_V_reg_1982_pp0_iter1_reg;
reg  signed [15:0] data_array_5_V_reg_1982_pp0_iter2_reg;
reg  signed [15:0] data_array_5_V_reg_1982_pp0_iter3_reg;
reg  signed [15:0] data_array_5_V_reg_1982_pp0_iter4_reg;
reg  signed [15:0] data_array_6_V_reg_1989;
reg  signed [15:0] data_array_6_V_reg_1989_pp0_iter1_reg;
reg  signed [15:0] data_array_6_V_reg_1989_pp0_iter2_reg;
reg  signed [15:0] data_array_6_V_reg_1989_pp0_iter3_reg;
reg  signed [15:0] data_array_6_V_reg_1989_pp0_iter4_reg;
reg  signed [15:0] data_array_7_V_reg_1996;
reg  signed [15:0] data_array_7_V_reg_1996_pp0_iter1_reg;
reg  signed [15:0] data_array_7_V_reg_1996_pp0_iter2_reg;
reg  signed [15:0] data_array_7_V_reg_1996_pp0_iter3_reg;
reg  signed [15:0] data_array_7_V_reg_1996_pp0_iter4_reg;
reg  signed [15:0] data_array_8_V_reg_2003;
reg  signed [15:0] data_array_8_V_reg_2003_pp0_iter1_reg;
reg  signed [15:0] data_array_8_V_reg_2003_pp0_iter2_reg;
reg  signed [15:0] data_array_8_V_reg_2003_pp0_iter3_reg;
reg  signed [15:0] data_array_8_V_reg_2003_pp0_iter4_reg;
reg  signed [15:0] data_array_9_V_reg_2010;
reg  signed [15:0] data_array_9_V_reg_2010_pp0_iter1_reg;
reg  signed [15:0] data_array_9_V_reg_2010_pp0_iter2_reg;
reg  signed [15:0] data_array_9_V_reg_2010_pp0_iter3_reg;
reg  signed [15:0] data_array_9_V_reg_2010_pp0_iter4_reg;
wire   [0:0] icmp_ln1496_fu_713_p2;
reg   [0:0] icmp_ln1496_reg_2017;
wire   [0:0] icmp_ln1496_1_fu_717_p2;
reg   [0:0] icmp_ln1496_1_reg_2022;
wire   [0:0] icmp_ln1496_3_fu_721_p2;
reg   [0:0] icmp_ln1496_3_reg_2027;
wire   [0:0] icmp_ln1496_4_fu_725_p2;
reg   [0:0] icmp_ln1496_4_reg_2032;
wire   [15:0] select_ln85_2_fu_745_p3;
reg   [15:0] select_ln85_2_reg_2037;
wire   [15:0] select_ln85_5_fu_769_p3;
reg   [15:0] select_ln85_5_reg_2043;
wire   [15:0] select_ln85_6_fu_781_p3;
reg   [15:0] select_ln85_6_reg_2049;
wire   [0:0] icmp_ln1496_7_fu_787_p2;
reg   [0:0] icmp_ln1496_7_reg_2055;
wire   [15:0] x_max_V_fu_801_p3;
reg   [15:0] x_max_V_reg_2060;
wire   [9:0] y_V_fu_1387_p3;
reg   [9:0] y_V_reg_2065;
wire   [9:0] y_V_1_fu_1421_p3;
reg   [9:0] y_V_1_reg_2070;
wire   [9:0] y_V_2_fu_1455_p3;
reg   [9:0] y_V_2_reg_2075;
wire   [9:0] y_V_3_fu_1489_p3;
reg   [9:0] y_V_3_reg_2080;
reg   [9:0] y_V_3_reg_2080_pp0_iter6_reg;
wire   [9:0] y_V_4_fu_1523_p3;
reg   [9:0] y_V_4_reg_2085;
reg   [9:0] y_V_4_reg_2085_pp0_iter6_reg;
wire   [9:0] y_V_5_fu_1557_p3;
reg   [9:0] y_V_5_reg_2090;
reg   [9:0] y_V_5_reg_2090_pp0_iter6_reg;
wire   [9:0] y_V_6_fu_1591_p3;
reg   [9:0] y_V_6_reg_2095;
reg   [9:0] y_V_6_reg_2095_pp0_iter6_reg;
wire   [9:0] y_V_7_fu_1625_p3;
reg   [9:0] y_V_7_reg_2100;
wire   [9:0] y_V_8_fu_1659_p3;
reg   [9:0] y_V_8_reg_2105;
reg   [9:0] y_V_8_reg_2105_pp0_iter6_reg;
wire   [9:0] y_V_9_fu_1693_p3;
reg   [9:0] y_V_9_reg_2110;
reg   [9:0] y_V_9_reg_2110_pp0_iter6_reg;
reg  signed [11:0] exp_res_0_V_reg_2135;
reg  signed [11:0] exp_res_0_V_reg_2135_pp0_iter8_reg;
reg  signed [11:0] exp_res_0_V_reg_2135_pp0_iter9_reg;
reg  signed [11:0] exp_res_0_V_reg_2135_pp0_iter10_reg;
reg  signed [11:0] exp_res_0_V_reg_2135_pp0_iter11_reg;
reg  signed [11:0] exp_res_0_V_reg_2135_pp0_iter12_reg;
reg  signed [11:0] exp_res_1_V_reg_2141;
reg  signed [11:0] exp_res_1_V_reg_2141_pp0_iter8_reg;
reg  signed [11:0] exp_res_1_V_reg_2141_pp0_iter9_reg;
reg  signed [11:0] exp_res_1_V_reg_2141_pp0_iter10_reg;
reg  signed [11:0] exp_res_1_V_reg_2141_pp0_iter11_reg;
reg  signed [11:0] exp_res_1_V_reg_2141_pp0_iter12_reg;
reg  signed [11:0] exp_res_2_V_reg_2147;
reg  signed [11:0] exp_res_2_V_reg_2147_pp0_iter8_reg;
reg  signed [11:0] exp_res_2_V_reg_2147_pp0_iter9_reg;
reg  signed [11:0] exp_res_2_V_reg_2147_pp0_iter10_reg;
reg  signed [11:0] exp_res_2_V_reg_2147_pp0_iter11_reg;
reg  signed [11:0] exp_res_2_V_reg_2147_pp0_iter12_reg;
reg  signed [11:0] exp_res_7_V_reg_2173;
reg  signed [11:0] exp_res_7_V_reg_2173_pp0_iter8_reg;
reg  signed [11:0] exp_res_7_V_reg_2173_pp0_iter9_reg;
reg  signed [11:0] exp_res_7_V_reg_2173_pp0_iter10_reg;
reg  signed [11:0] exp_res_7_V_reg_2173_pp0_iter11_reg;
reg  signed [11:0] exp_res_7_V_reg_2173_pp0_iter12_reg;
reg  signed [11:0] exp_res_3_V_reg_2189;
reg  signed [11:0] exp_res_3_V_reg_2189_pp0_iter9_reg;
reg  signed [11:0] exp_res_3_V_reg_2189_pp0_iter10_reg;
reg  signed [11:0] exp_res_3_V_reg_2189_pp0_iter11_reg;
reg  signed [11:0] exp_res_3_V_reg_2189_pp0_iter12_reg;
reg  signed [11:0] exp_res_4_V_reg_2195;
reg  signed [11:0] exp_res_4_V_reg_2195_pp0_iter9_reg;
reg  signed [11:0] exp_res_4_V_reg_2195_pp0_iter10_reg;
reg  signed [11:0] exp_res_4_V_reg_2195_pp0_iter11_reg;
reg  signed [11:0] exp_res_4_V_reg_2195_pp0_iter12_reg;
reg  signed [11:0] exp_res_5_V_reg_2201;
reg  signed [11:0] exp_res_5_V_reg_2201_pp0_iter9_reg;
reg  signed [11:0] exp_res_5_V_reg_2201_pp0_iter10_reg;
reg  signed [11:0] exp_res_5_V_reg_2201_pp0_iter11_reg;
reg  signed [11:0] exp_res_5_V_reg_2201_pp0_iter12_reg;
reg  signed [11:0] exp_res_6_V_reg_2207;
reg  signed [11:0] exp_res_6_V_reg_2207_pp0_iter9_reg;
reg  signed [11:0] exp_res_6_V_reg_2207_pp0_iter10_reg;
reg  signed [11:0] exp_res_6_V_reg_2207_pp0_iter11_reg;
reg  signed [11:0] exp_res_6_V_reg_2207_pp0_iter12_reg;
reg  signed [11:0] exp_res_8_V_reg_2213;
reg  signed [11:0] exp_res_8_V_reg_2213_pp0_iter9_reg;
reg  signed [11:0] exp_res_8_V_reg_2213_pp0_iter10_reg;
reg  signed [11:0] exp_res_8_V_reg_2213_pp0_iter11_reg;
reg  signed [11:0] exp_res_8_V_reg_2213_pp0_iter12_reg;
reg  signed [11:0] exp_res_9_V_reg_2219;
reg  signed [11:0] exp_res_9_V_reg_2219_pp0_iter9_reg;
reg  signed [11:0] exp_res_9_V_reg_2219_pp0_iter10_reg;
reg  signed [11:0] exp_res_9_V_reg_2219_pp0_iter11_reg;
reg  signed [11:0] exp_res_9_V_reg_2219_pp0_iter12_reg;
wire   [11:0] add_ln703_fu_1741_p2;
reg   [11:0] add_ln703_reg_2225;
wire   [11:0] add_ln703_1_fu_1745_p2;
reg   [11:0] add_ln703_1_reg_2230;
wire   [11:0] add_ln703_3_fu_1753_p2;
reg   [11:0] add_ln703_3_reg_2235;
wire   [11:0] add_ln703_4_fu_1758_p2;
reg   [11:0] add_ln703_4_reg_2240;
wire   [11:0] add_ln703_6_fu_1766_p2;
reg   [11:0] add_ln703_6_reg_2245;
reg   [9:0] y_V_10_reg_2250;
reg   [11:0] inv_exp_sum_V_reg_2260;
wire  signed [23:0] sext_ln1118_fu_1794_p1;
reg   [15:0] tmp_data_0_V_reg_2329;
reg   [15:0] tmp_data_1_V_reg_2334;
reg   [15:0] tmp_data_2_V_reg_2339;
reg   [15:0] tmp_data_3_V_reg_2344;
reg   [15:0] tmp_data_4_V_reg_2349;
reg   [15:0] tmp_data_5_V_reg_2354;
reg   [15:0] tmp_data_6_V_reg_2359;
reg   [15:0] tmp_data_7_V_reg_2364;
reg   [15:0] tmp_data_8_V_reg_2369;
reg   [15:0] tmp_data_9_V_reg_2374;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln236_fu_1701_p1;
wire   [63:0] zext_ln236_1_fu_1705_p1;
wire   [63:0] zext_ln236_2_fu_1709_p1;
wire   [63:0] zext_ln236_7_fu_1713_p1;
wire   [63:0] zext_ln236_3_fu_1717_p1;
wire   [63:0] zext_ln236_4_fu_1721_p1;
wire   [63:0] zext_ln236_5_fu_1725_p1;
wire   [63:0] zext_ln236_6_fu_1729_p1;
wire   [63:0] zext_ln236_8_fu_1733_p1;
wire   [63:0] zext_ln236_9_fu_1737_p1;
wire   [63:0] zext_ln244_fu_1790_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [11:0] grp_fu_302_p0;
wire  signed [11:0] grp_fu_303_p0;
wire  signed [11:0] grp_fu_304_p0;
wire  signed [11:0] grp_fu_305_p0;
wire  signed [11:0] grp_fu_306_p0;
wire  signed [11:0] grp_fu_307_p0;
wire  signed [11:0] grp_fu_308_p0;
wire  signed [11:0] grp_fu_309_p0;
wire  signed [11:0] grp_fu_310_p0;
wire  signed [11:0] grp_fu_311_p0;
wire   [15:0] select_ln85_fu_729_p3;
wire   [15:0] select_ln85_1_fu_734_p3;
wire   [0:0] icmp_ln1496_2_fu_739_p2;
wire   [15:0] select_ln85_3_fu_753_p3;
wire   [15:0] select_ln85_4_fu_758_p3;
wire   [0:0] icmp_ln1496_5_fu_763_p2;
wire   [0:0] icmp_ln1496_6_fu_777_p2;
wire   [15:0] select_ln85_7_fu_791_p3;
wire   [0:0] icmp_ln1496_8_fu_796_p2;
wire  signed [16:0] sext_ln703_fu_808_p1;
wire  signed [16:0] sext_ln703_1_fu_811_p1;
wire   [16:0] sub_ln1193_fu_814_p2;
wire   [0:0] tmp_21_fu_828_p3;
wire   [0:0] tmp_fu_820_p3;
wire   [0:0] xor_ln786_fu_836_p2;
wire   [0:0] xor_ln340_fu_854_p2;
wire  signed [16:0] sext_ln703_2_fu_866_p1;
wire   [16:0] sub_ln1193_1_fu_869_p2;
wire   [0:0] tmp_23_fu_883_p3;
wire   [0:0] tmp_22_fu_875_p3;
wire   [0:0] xor_ln786_1_fu_891_p2;
wire   [0:0] xor_ln340_1_fu_909_p2;
wire  signed [16:0] sext_ln703_3_fu_921_p1;
wire   [16:0] sub_ln1193_2_fu_924_p2;
wire   [0:0] tmp_25_fu_938_p3;
wire   [0:0] tmp_24_fu_930_p3;
wire   [0:0] xor_ln786_2_fu_946_p2;
wire   [0:0] xor_ln340_2_fu_964_p2;
wire  signed [16:0] sext_ln703_4_fu_976_p1;
wire   [16:0] sub_ln1193_3_fu_979_p2;
wire   [0:0] tmp_27_fu_993_p3;
wire   [0:0] tmp_26_fu_985_p3;
wire   [0:0] xor_ln786_3_fu_1001_p2;
wire   [0:0] xor_ln340_3_fu_1019_p2;
wire  signed [16:0] sext_ln703_5_fu_1031_p1;
wire   [16:0] sub_ln1193_4_fu_1034_p2;
wire   [0:0] tmp_29_fu_1048_p3;
wire   [0:0] tmp_28_fu_1040_p3;
wire   [0:0] xor_ln786_4_fu_1056_p2;
wire   [0:0] xor_ln340_4_fu_1074_p2;
wire  signed [16:0] sext_ln703_6_fu_1086_p1;
wire   [16:0] sub_ln1193_5_fu_1089_p2;
wire   [0:0] tmp_31_fu_1103_p3;
wire   [0:0] tmp_30_fu_1095_p3;
wire   [0:0] xor_ln786_5_fu_1111_p2;
wire   [0:0] xor_ln340_5_fu_1129_p2;
wire  signed [16:0] sext_ln703_7_fu_1141_p1;
wire   [16:0] sub_ln1193_6_fu_1144_p2;
wire   [0:0] tmp_33_fu_1158_p3;
wire   [0:0] tmp_32_fu_1150_p3;
wire   [0:0] xor_ln786_6_fu_1166_p2;
wire   [0:0] xor_ln340_6_fu_1184_p2;
wire  signed [16:0] sext_ln703_8_fu_1196_p1;
wire   [16:0] sub_ln1193_7_fu_1199_p2;
wire   [0:0] tmp_35_fu_1213_p3;
wire   [0:0] tmp_34_fu_1205_p3;
wire   [0:0] xor_ln786_7_fu_1221_p2;
wire   [0:0] xor_ln340_7_fu_1239_p2;
wire  signed [16:0] sext_ln703_9_fu_1251_p1;
wire   [16:0] sub_ln1193_8_fu_1254_p2;
wire   [0:0] tmp_37_fu_1268_p3;
wire   [0:0] tmp_36_fu_1260_p3;
wire   [0:0] xor_ln786_8_fu_1276_p2;
wire   [0:0] xor_ln340_8_fu_1294_p2;
wire  signed [16:0] sext_ln703_10_fu_1306_p1;
wire   [16:0] sub_ln1193_9_fu_1309_p2;
wire   [0:0] tmp_39_fu_1323_p3;
wire   [0:0] tmp_38_fu_1315_p3;
wire   [0:0] xor_ln786_9_fu_1331_p2;
wire   [0:0] xor_ln340_9_fu_1349_p2;
wire   [0:0] xor_ln340_10_fu_848_p2;
wire   [9:0] tmp_11_fu_1361_p4;
wire   [0:0] and_ln786_fu_842_p2;
wire   [0:0] or_ln340_fu_860_p2;
wire   [9:0] select_ln340_fu_1371_p3;
wire   [9:0] select_ln388_fu_1379_p3;
wire   [0:0] xor_ln340_11_fu_903_p2;
wire   [9:0] tmp_12_fu_1395_p4;
wire   [0:0] and_ln786_1_fu_897_p2;
wire   [0:0] or_ln340_1_fu_915_p2;
wire   [9:0] select_ln340_2_fu_1405_p3;
wire   [9:0] select_ln388_1_fu_1413_p3;
wire   [0:0] xor_ln340_12_fu_958_p2;
wire   [9:0] tmp_13_fu_1429_p4;
wire   [0:0] and_ln786_2_fu_952_p2;
wire   [0:0] or_ln340_2_fu_970_p2;
wire   [9:0] select_ln340_4_fu_1439_p3;
wire   [9:0] select_ln388_2_fu_1447_p3;
wire   [0:0] xor_ln340_13_fu_1013_p2;
wire   [9:0] tmp_14_fu_1463_p4;
wire   [0:0] and_ln786_3_fu_1007_p2;
wire   [0:0] or_ln340_3_fu_1025_p2;
wire   [9:0] select_ln340_6_fu_1473_p3;
wire   [9:0] select_ln388_3_fu_1481_p3;
wire   [0:0] xor_ln340_14_fu_1068_p2;
wire   [9:0] tmp_15_fu_1497_p4;
wire   [0:0] and_ln786_4_fu_1062_p2;
wire   [0:0] or_ln340_4_fu_1080_p2;
wire   [9:0] select_ln340_8_fu_1507_p3;
wire   [9:0] select_ln388_4_fu_1515_p3;
wire   [0:0] xor_ln340_15_fu_1123_p2;
wire   [9:0] tmp_16_fu_1531_p4;
wire   [0:0] and_ln786_5_fu_1117_p2;
wire   [0:0] or_ln340_5_fu_1135_p2;
wire   [9:0] select_ln340_10_fu_1541_p3;
wire   [9:0] select_ln388_5_fu_1549_p3;
wire   [0:0] xor_ln340_16_fu_1178_p2;
wire   [9:0] tmp_17_fu_1565_p4;
wire   [0:0] and_ln786_6_fu_1172_p2;
wire   [0:0] or_ln340_6_fu_1190_p2;
wire   [9:0] select_ln340_12_fu_1575_p3;
wire   [9:0] select_ln388_6_fu_1583_p3;
wire   [0:0] xor_ln340_17_fu_1233_p2;
wire   [9:0] tmp_18_fu_1599_p4;
wire   [0:0] and_ln786_7_fu_1227_p2;
wire   [0:0] or_ln340_7_fu_1245_p2;
wire   [9:0] select_ln340_14_fu_1609_p3;
wire   [9:0] select_ln388_7_fu_1617_p3;
wire   [0:0] xor_ln340_18_fu_1288_p2;
wire   [9:0] tmp_19_fu_1633_p4;
wire   [0:0] and_ln786_8_fu_1282_p2;
wire   [0:0] or_ln340_8_fu_1300_p2;
wire   [9:0] select_ln340_16_fu_1643_p3;
wire   [9:0] select_ln388_8_fu_1651_p3;
wire   [0:0] xor_ln340_19_fu_1343_p2;
wire   [9:0] tmp_20_fu_1667_p4;
wire   [0:0] and_ln786_9_fu_1337_p2;
wire   [0:0] or_ln340_9_fu_1355_p2;
wire   [9:0] select_ln340_18_fu_1677_p3;
wire   [9:0] select_ln388_9_fu_1685_p3;
wire   [11:0] add_ln703_2_fu_1749_p2;
wire   [11:0] add_ln703_5_fu_1762_p2;
wire   [11:0] add_ln703_7_fu_1771_p2;
wire   [11:0] exp_sum_V_fu_1775_p2;
wire   [23:0] grp_fu_302_p2;
wire   [23:0] grp_fu_309_p2;
wire   [23:0] grp_fu_303_p2;
wire   [23:0] grp_fu_306_p2;
wire   [23:0] grp_fu_304_p2;
wire   [23:0] grp_fu_308_p2;
wire   [23:0] grp_fu_305_p2;
wire   [23:0] grp_fu_307_p2;
wire   [23:0] grp_fu_310_p2;
wire   [23:0] grp_fu_311_p2;
reg    grp_fu_302_ce;
reg    grp_fu_303_ce;
reg    grp_fu_304_ce;
reg    grp_fu_305_ce;
reg    grp_fu_306_ce;
reg    grp_fu_307_ce;
reg    grp_fu_308_ce;
reg    grp_fu_309_ce;
reg    grp_fu_310_ce;
reg    grp_fu_311_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to14;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

softmax_stable_array_array_softmax_config12_s_exp_table8 #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table8_address0),
    .ce0(exp_table8_ce0),
    .q0(exp_table8_q0),
    .address1(exp_table8_address1),
    .ce1(exp_table8_ce1),
    .q1(exp_table8_q1),
    .address2(exp_table8_address2),
    .ce2(exp_table8_ce2),
    .q2(exp_table8_q2),
    .address3(exp_table8_address3),
    .ce3(exp_table8_ce3),
    .q3(exp_table8_q3),
    .address4(exp_table8_address4),
    .ce4(exp_table8_ce4),
    .q4(exp_table8_q4),
    .address5(exp_table8_address5),
    .ce5(exp_table8_ce5),
    .q5(exp_table8_q5),
    .address6(exp_table8_address6),
    .ce6(exp_table8_ce6),
    .q6(exp_table8_q6),
    .address7(exp_table8_address7),
    .ce7(exp_table8_ce7),
    .q7(exp_table8_q7),
    .address8(exp_table8_address8),
    .ce8(exp_table8_ce8),
    .q8(exp_table8_q8),
    .address9(exp_table8_address9),
    .ce9(exp_table8_ce9),
    .q9(exp_table8_q9)
);

softmax_stable_array_array_softmax_config12_s_invert_table9 #(
    .DataWidth( 12 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table9_address0),
    .ce0(invert_table9_ce0),
    .q0(invert_table9_q0)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1026(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_302_p0),
    .din1(exp_res_0_V_reg_2135_pp0_iter12_reg),
    .ce(grp_fu_302_ce),
    .dout(grp_fu_302_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1027(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .din1(exp_res_2_V_reg_2147_pp0_iter12_reg),
    .ce(grp_fu_303_ce),
    .dout(grp_fu_303_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1028(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_304_p0),
    .din1(exp_res_4_V_reg_2195_pp0_iter12_reg),
    .ce(grp_fu_304_ce),
    .dout(grp_fu_304_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1029(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_305_p0),
    .din1(exp_res_6_V_reg_2207_pp0_iter12_reg),
    .ce(grp_fu_305_ce),
    .dout(grp_fu_305_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1030(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_306_p0),
    .din1(exp_res_3_V_reg_2189_pp0_iter12_reg),
    .ce(grp_fu_306_ce),
    .dout(grp_fu_306_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1031(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_307_p0),
    .din1(exp_res_7_V_reg_2173_pp0_iter12_reg),
    .ce(grp_fu_307_ce),
    .dout(grp_fu_307_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1032(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_308_p0),
    .din1(exp_res_5_V_reg_2201_pp0_iter12_reg),
    .ce(grp_fu_308_ce),
    .dout(grp_fu_308_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1033(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_309_p0),
    .din1(exp_res_1_V_reg_2141_pp0_iter12_reg),
    .ce(grp_fu_309_ce),
    .dout(grp_fu_309_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1034(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_310_p0),
    .din1(exp_res_8_V_reg_2213_pp0_iter12_reg),
    .ce(grp_fu_310_ce),
    .dout(grp_fu_310_p2)
);

myproject_axi_mul_12s_12s_24_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
myproject_axi_mul_12s_12s_24_2_1_U1035(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_311_p0),
    .din1(exp_res_9_V_reg_2219_pp0_iter12_reg),
    .ce(grp_fu_311_ce),
    .dout(grp_fu_311_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln703_1_reg_2230 <= add_ln703_1_fu_1745_p2;
        add_ln703_3_reg_2235 <= add_ln703_3_fu_1753_p2;
        add_ln703_4_reg_2240 <= add_ln703_4_fu_1758_p2;
        add_ln703_6_reg_2245 <= add_ln703_6_fu_1766_p2;
        add_ln703_reg_2225 <= add_ln703_fu_1741_p2;
        data_array_0_V_reg_1947_pp0_iter2_reg <= data_array_0_V_reg_1947_pp0_iter1_reg;
        data_array_0_V_reg_1947_pp0_iter3_reg <= data_array_0_V_reg_1947_pp0_iter2_reg;
        data_array_0_V_reg_1947_pp0_iter4_reg <= data_array_0_V_reg_1947_pp0_iter3_reg;
        data_array_1_V_reg_1954_pp0_iter2_reg <= data_array_1_V_reg_1954_pp0_iter1_reg;
        data_array_1_V_reg_1954_pp0_iter3_reg <= data_array_1_V_reg_1954_pp0_iter2_reg;
        data_array_1_V_reg_1954_pp0_iter4_reg <= data_array_1_V_reg_1954_pp0_iter3_reg;
        data_array_2_V_reg_1961_pp0_iter2_reg <= data_array_2_V_reg_1961_pp0_iter1_reg;
        data_array_2_V_reg_1961_pp0_iter3_reg <= data_array_2_V_reg_1961_pp0_iter2_reg;
        data_array_2_V_reg_1961_pp0_iter4_reg <= data_array_2_V_reg_1961_pp0_iter3_reg;
        data_array_3_V_reg_1968_pp0_iter2_reg <= data_array_3_V_reg_1968_pp0_iter1_reg;
        data_array_3_V_reg_1968_pp0_iter3_reg <= data_array_3_V_reg_1968_pp0_iter2_reg;
        data_array_3_V_reg_1968_pp0_iter4_reg <= data_array_3_V_reg_1968_pp0_iter3_reg;
        data_array_4_V_reg_1975_pp0_iter2_reg <= data_array_4_V_reg_1975_pp0_iter1_reg;
        data_array_4_V_reg_1975_pp0_iter3_reg <= data_array_4_V_reg_1975_pp0_iter2_reg;
        data_array_4_V_reg_1975_pp0_iter4_reg <= data_array_4_V_reg_1975_pp0_iter3_reg;
        data_array_5_V_reg_1982_pp0_iter2_reg <= data_array_5_V_reg_1982_pp0_iter1_reg;
        data_array_5_V_reg_1982_pp0_iter3_reg <= data_array_5_V_reg_1982_pp0_iter2_reg;
        data_array_5_V_reg_1982_pp0_iter4_reg <= data_array_5_V_reg_1982_pp0_iter3_reg;
        data_array_6_V_reg_1989_pp0_iter2_reg <= data_array_6_V_reg_1989_pp0_iter1_reg;
        data_array_6_V_reg_1989_pp0_iter3_reg <= data_array_6_V_reg_1989_pp0_iter2_reg;
        data_array_6_V_reg_1989_pp0_iter4_reg <= data_array_6_V_reg_1989_pp0_iter3_reg;
        data_array_7_V_reg_1996_pp0_iter2_reg <= data_array_7_V_reg_1996_pp0_iter1_reg;
        data_array_7_V_reg_1996_pp0_iter3_reg <= data_array_7_V_reg_1996_pp0_iter2_reg;
        data_array_7_V_reg_1996_pp0_iter4_reg <= data_array_7_V_reg_1996_pp0_iter3_reg;
        data_array_8_V_reg_2003_pp0_iter2_reg <= data_array_8_V_reg_2003_pp0_iter1_reg;
        data_array_8_V_reg_2003_pp0_iter3_reg <= data_array_8_V_reg_2003_pp0_iter2_reg;
        data_array_8_V_reg_2003_pp0_iter4_reg <= data_array_8_V_reg_2003_pp0_iter3_reg;
        data_array_9_V_reg_2010_pp0_iter2_reg <= data_array_9_V_reg_2010_pp0_iter1_reg;
        data_array_9_V_reg_2010_pp0_iter3_reg <= data_array_9_V_reg_2010_pp0_iter2_reg;
        data_array_9_V_reg_2010_pp0_iter4_reg <= data_array_9_V_reg_2010_pp0_iter3_reg;
        exp_res_0_V_reg_2135_pp0_iter10_reg <= exp_res_0_V_reg_2135_pp0_iter9_reg;
        exp_res_0_V_reg_2135_pp0_iter11_reg <= exp_res_0_V_reg_2135_pp0_iter10_reg;
        exp_res_0_V_reg_2135_pp0_iter12_reg <= exp_res_0_V_reg_2135_pp0_iter11_reg;
        exp_res_0_V_reg_2135_pp0_iter8_reg <= exp_res_0_V_reg_2135;
        exp_res_0_V_reg_2135_pp0_iter9_reg <= exp_res_0_V_reg_2135_pp0_iter8_reg;
        exp_res_1_V_reg_2141_pp0_iter10_reg <= exp_res_1_V_reg_2141_pp0_iter9_reg;
        exp_res_1_V_reg_2141_pp0_iter11_reg <= exp_res_1_V_reg_2141_pp0_iter10_reg;
        exp_res_1_V_reg_2141_pp0_iter12_reg <= exp_res_1_V_reg_2141_pp0_iter11_reg;
        exp_res_1_V_reg_2141_pp0_iter8_reg <= exp_res_1_V_reg_2141;
        exp_res_1_V_reg_2141_pp0_iter9_reg <= exp_res_1_V_reg_2141_pp0_iter8_reg;
        exp_res_2_V_reg_2147_pp0_iter10_reg <= exp_res_2_V_reg_2147_pp0_iter9_reg;
        exp_res_2_V_reg_2147_pp0_iter11_reg <= exp_res_2_V_reg_2147_pp0_iter10_reg;
        exp_res_2_V_reg_2147_pp0_iter12_reg <= exp_res_2_V_reg_2147_pp0_iter11_reg;
        exp_res_2_V_reg_2147_pp0_iter8_reg <= exp_res_2_V_reg_2147;
        exp_res_2_V_reg_2147_pp0_iter9_reg <= exp_res_2_V_reg_2147_pp0_iter8_reg;
        exp_res_3_V_reg_2189_pp0_iter10_reg <= exp_res_3_V_reg_2189_pp0_iter9_reg;
        exp_res_3_V_reg_2189_pp0_iter11_reg <= exp_res_3_V_reg_2189_pp0_iter10_reg;
        exp_res_3_V_reg_2189_pp0_iter12_reg <= exp_res_3_V_reg_2189_pp0_iter11_reg;
        exp_res_3_V_reg_2189_pp0_iter9_reg <= exp_res_3_V_reg_2189;
        exp_res_4_V_reg_2195_pp0_iter10_reg <= exp_res_4_V_reg_2195_pp0_iter9_reg;
        exp_res_4_V_reg_2195_pp0_iter11_reg <= exp_res_4_V_reg_2195_pp0_iter10_reg;
        exp_res_4_V_reg_2195_pp0_iter12_reg <= exp_res_4_V_reg_2195_pp0_iter11_reg;
        exp_res_4_V_reg_2195_pp0_iter9_reg <= exp_res_4_V_reg_2195;
        exp_res_5_V_reg_2201_pp0_iter10_reg <= exp_res_5_V_reg_2201_pp0_iter9_reg;
        exp_res_5_V_reg_2201_pp0_iter11_reg <= exp_res_5_V_reg_2201_pp0_iter10_reg;
        exp_res_5_V_reg_2201_pp0_iter12_reg <= exp_res_5_V_reg_2201_pp0_iter11_reg;
        exp_res_5_V_reg_2201_pp0_iter9_reg <= exp_res_5_V_reg_2201;
        exp_res_6_V_reg_2207_pp0_iter10_reg <= exp_res_6_V_reg_2207_pp0_iter9_reg;
        exp_res_6_V_reg_2207_pp0_iter11_reg <= exp_res_6_V_reg_2207_pp0_iter10_reg;
        exp_res_6_V_reg_2207_pp0_iter12_reg <= exp_res_6_V_reg_2207_pp0_iter11_reg;
        exp_res_6_V_reg_2207_pp0_iter9_reg <= exp_res_6_V_reg_2207;
        exp_res_7_V_reg_2173_pp0_iter10_reg <= exp_res_7_V_reg_2173_pp0_iter9_reg;
        exp_res_7_V_reg_2173_pp0_iter11_reg <= exp_res_7_V_reg_2173_pp0_iter10_reg;
        exp_res_7_V_reg_2173_pp0_iter12_reg <= exp_res_7_V_reg_2173_pp0_iter11_reg;
        exp_res_7_V_reg_2173_pp0_iter8_reg <= exp_res_7_V_reg_2173;
        exp_res_7_V_reg_2173_pp0_iter9_reg <= exp_res_7_V_reg_2173_pp0_iter8_reg;
        exp_res_8_V_reg_2213_pp0_iter10_reg <= exp_res_8_V_reg_2213_pp0_iter9_reg;
        exp_res_8_V_reg_2213_pp0_iter11_reg <= exp_res_8_V_reg_2213_pp0_iter10_reg;
        exp_res_8_V_reg_2213_pp0_iter12_reg <= exp_res_8_V_reg_2213_pp0_iter11_reg;
        exp_res_8_V_reg_2213_pp0_iter9_reg <= exp_res_8_V_reg_2213;
        exp_res_9_V_reg_2219_pp0_iter10_reg <= exp_res_9_V_reg_2219_pp0_iter9_reg;
        exp_res_9_V_reg_2219_pp0_iter11_reg <= exp_res_9_V_reg_2219_pp0_iter10_reg;
        exp_res_9_V_reg_2219_pp0_iter12_reg <= exp_res_9_V_reg_2219_pp0_iter11_reg;
        exp_res_9_V_reg_2219_pp0_iter9_reg <= exp_res_9_V_reg_2219;
        icmp_ln1496_7_reg_2055 <= icmp_ln1496_7_fu_787_p2;
        inv_exp_sum_V_reg_2260 <= invert_table9_q0;
        select_ln85_2_reg_2037 <= select_ln85_2_fu_745_p3;
        select_ln85_5_reg_2043 <= select_ln85_5_fu_769_p3;
        select_ln85_6_reg_2049 <= select_ln85_6_fu_781_p3;
        tmp_data_0_V_reg_2329 <= {{grp_fu_302_p2[23:8]}};
        tmp_data_1_V_reg_2334 <= {{grp_fu_309_p2[23:8]}};
        tmp_data_2_V_reg_2339 <= {{grp_fu_303_p2[23:8]}};
        tmp_data_3_V_reg_2344 <= {{grp_fu_306_p2[23:8]}};
        tmp_data_4_V_reg_2349 <= {{grp_fu_304_p2[23:8]}};
        tmp_data_5_V_reg_2354 <= {{grp_fu_308_p2[23:8]}};
        tmp_data_6_V_reg_2359 <= {{grp_fu_305_p2[23:8]}};
        tmp_data_7_V_reg_2364 <= {{grp_fu_307_p2[23:8]}};
        tmp_data_8_V_reg_2369 <= {{grp_fu_310_p2[23:8]}};
        tmp_data_9_V_reg_2374 <= {{grp_fu_311_p2[23:8]}};
        x_max_V_reg_2060 <= x_max_V_fu_801_p3;
        y_V_10_reg_2250 <= {{exp_sum_V_fu_1775_p2[11:2]}};
        y_V_1_reg_2070 <= y_V_1_fu_1421_p3;
        y_V_2_reg_2075 <= y_V_2_fu_1455_p3;
        y_V_3_reg_2080 <= y_V_3_fu_1489_p3;
        y_V_3_reg_2080_pp0_iter6_reg <= y_V_3_reg_2080;
        y_V_4_reg_2085 <= y_V_4_fu_1523_p3;
        y_V_4_reg_2085_pp0_iter6_reg <= y_V_4_reg_2085;
        y_V_5_reg_2090 <= y_V_5_fu_1557_p3;
        y_V_5_reg_2090_pp0_iter6_reg <= y_V_5_reg_2090;
        y_V_6_reg_2095 <= y_V_6_fu_1591_p3;
        y_V_6_reg_2095_pp0_iter6_reg <= y_V_6_reg_2095;
        y_V_7_reg_2100 <= y_V_7_fu_1625_p3;
        y_V_8_reg_2105 <= y_V_8_fu_1659_p3;
        y_V_8_reg_2105_pp0_iter6_reg <= y_V_8_reg_2105;
        y_V_9_reg_2110 <= y_V_9_fu_1693_p3;
        y_V_9_reg_2110_pp0_iter6_reg <= y_V_9_reg_2110;
        y_V_reg_2065 <= y_V_fu_1387_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_array_0_V_reg_1947 <= data_V_data_0_V_dout;
        data_array_0_V_reg_1947_pp0_iter1_reg <= data_array_0_V_reg_1947;
        data_array_1_V_reg_1954 <= data_V_data_1_V_dout;
        data_array_1_V_reg_1954_pp0_iter1_reg <= data_array_1_V_reg_1954;
        data_array_2_V_reg_1961 <= data_V_data_2_V_dout;
        data_array_2_V_reg_1961_pp0_iter1_reg <= data_array_2_V_reg_1961;
        data_array_3_V_reg_1968 <= data_V_data_3_V_dout;
        data_array_3_V_reg_1968_pp0_iter1_reg <= data_array_3_V_reg_1968;
        data_array_4_V_reg_1975 <= data_V_data_4_V_dout;
        data_array_4_V_reg_1975_pp0_iter1_reg <= data_array_4_V_reg_1975;
        data_array_5_V_reg_1982 <= data_V_data_5_V_dout;
        data_array_5_V_reg_1982_pp0_iter1_reg <= data_array_5_V_reg_1982;
        data_array_6_V_reg_1989 <= data_V_data_6_V_dout;
        data_array_6_V_reg_1989_pp0_iter1_reg <= data_array_6_V_reg_1989;
        data_array_7_V_reg_1996 <= data_V_data_7_V_dout;
        data_array_7_V_reg_1996_pp0_iter1_reg <= data_array_7_V_reg_1996;
        data_array_8_V_reg_2003 <= data_V_data_8_V_dout;
        data_array_8_V_reg_2003_pp0_iter1_reg <= data_array_8_V_reg_2003;
        data_array_9_V_reg_2010 <= data_V_data_9_V_dout;
        data_array_9_V_reg_2010_pp0_iter1_reg <= data_array_9_V_reg_2010;
        icmp_ln1496_1_reg_2022 <= icmp_ln1496_1_fu_717_p2;
        icmp_ln1496_3_reg_2027 <= icmp_ln1496_3_fu_721_p2;
        icmp_ln1496_4_reg_2032 <= icmp_ln1496_4_fu_725_p2;
        icmp_ln1496_reg_2017 <= icmp_ln1496_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_0_V_reg_2135 <= exp_table8_q0;
        exp_res_1_V_reg_2141 <= exp_table8_q1;
        exp_res_2_V_reg_2147 <= exp_table8_q2;
        exp_res_7_V_reg_2173 <= exp_table8_q3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_res_3_V_reg_2189 <= exp_table8_q4;
        exp_res_4_V_reg_2195 <= exp_table8_q5;
        exp_res_5_V_reg_2201 <= exp_table8_q6;
        exp_res_6_V_reg_2207 <= exp_table8_q7;
        exp_res_8_V_reg_2213 <= exp_table8_q8;
        exp_res_9_V_reg_2219 <= exp_table8_q9;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to14 = 1'b1;
    end else begin
        ap_idle_pp0_0to14 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to14 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_4_V_blk_n = data_V_data_4_V_empty_n;
    end else begin
        data_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_4_V_read = 1'b1;
    end else begin
        data_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_5_V_blk_n = data_V_data_5_V_empty_n;
    end else begin
        data_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_5_V_read = 1'b1;
    end else begin
        data_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_6_V_blk_n = data_V_data_6_V_empty_n;
    end else begin
        data_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_6_V_read = 1'b1;
    end else begin
        data_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_7_V_blk_n = data_V_data_7_V_empty_n;
    end else begin
        data_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_7_V_read = 1'b1;
    end else begin
        data_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_8_V_blk_n = data_V_data_8_V_empty_n;
    end else begin
        data_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_8_V_read = 1'b1;
    end else begin
        data_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_data_9_V_blk_n = data_V_data_9_V_empty_n;
    end else begin
        data_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_V_data_9_V_read = 1'b1;
    end else begin
        data_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce0 = 1'b1;
    end else begin
        exp_table8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce1 = 1'b1;
    end else begin
        exp_table8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce2 = 1'b1;
    end else begin
        exp_table8_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce3 = 1'b1;
    end else begin
        exp_table8_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce4 = 1'b1;
    end else begin
        exp_table8_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce5 = 1'b1;
    end else begin
        exp_table8_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce6 = 1'b1;
    end else begin
        exp_table8_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce7 = 1'b1;
    end else begin
        exp_table8_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce8 = 1'b1;
    end else begin
        exp_table8_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_table8_ce9 = 1'b1;
    end else begin
        exp_table8_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_302_ce = 1'b1;
    end else begin
        grp_fu_302_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_303_ce = 1'b1;
    end else begin
        grp_fu_303_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_304_ce = 1'b1;
    end else begin
        grp_fu_304_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_305_ce = 1'b1;
    end else begin
        grp_fu_305_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_306_ce = 1'b1;
    end else begin
        grp_fu_306_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_307_ce = 1'b1;
    end else begin
        grp_fu_307_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_308_ce = 1'b1;
    end else begin
        grp_fu_308_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_309_ce = 1'b1;
    end else begin
        grp_fu_309_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_310_ce = 1'b1;
    end else begin
        grp_fu_310_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_311_ce = 1'b1;
    end else begin
        grp_fu_311_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        invert_table9_ce0 = 1'b1;
    end else begin
        invert_table9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_4_V_blk_n = res_V_data_4_V_full_n;
    end else begin
        res_V_data_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_4_V_write = 1'b1;
    end else begin
        res_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_5_V_blk_n = res_V_data_5_V_full_n;
    end else begin
        res_V_data_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_5_V_write = 1'b1;
    end else begin
        res_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_6_V_blk_n = res_V_data_6_V_full_n;
    end else begin
        res_V_data_6_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_6_V_write = 1'b1;
    end else begin
        res_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_7_V_blk_n = res_V_data_7_V_full_n;
    end else begin
        res_V_data_7_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_7_V_write = 1'b1;
    end else begin
        res_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_8_V_blk_n = res_V_data_8_V_full_n;
    end else begin
        res_V_data_8_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_8_V_write = 1'b1;
    end else begin
        res_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter15 == 1'b1))) begin
        res_V_data_9_V_blk_n = res_V_data_9_V_full_n;
    end else begin
        res_V_data_9_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_V_data_9_V_write = 1'b1;
    end else begin
        res_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_1745_p2 = ($signed(exp_res_7_V_reg_2173) + $signed(exp_res_2_V_reg_2147));

assign add_ln703_2_fu_1749_p2 = ($signed(exp_res_3_V_reg_2189) + $signed(add_ln703_1_reg_2230));

assign add_ln703_3_fu_1753_p2 = (add_ln703_reg_2225 + add_ln703_2_fu_1749_p2);

assign add_ln703_4_fu_1758_p2 = ($signed(exp_res_5_V_reg_2201) + $signed(exp_res_6_V_reg_2207));

assign add_ln703_5_fu_1762_p2 = ($signed(exp_res_8_V_reg_2213) + $signed(exp_res_9_V_reg_2219));

assign add_ln703_6_fu_1766_p2 = ($signed(exp_res_4_V_reg_2195) + $signed(add_ln703_5_fu_1762_p2));

assign add_ln703_7_fu_1771_p2 = (add_ln703_4_reg_2240 + add_ln703_6_reg_2245);

assign add_ln703_fu_1741_p2 = ($signed(exp_res_1_V_reg_2141) + $signed(exp_res_0_V_reg_2135));

assign and_ln786_1_fu_897_p2 = (xor_ln786_1_fu_891_p2 & tmp_22_fu_875_p3);

assign and_ln786_2_fu_952_p2 = (xor_ln786_2_fu_946_p2 & tmp_24_fu_930_p3);

assign and_ln786_3_fu_1007_p2 = (xor_ln786_3_fu_1001_p2 & tmp_26_fu_985_p3);

assign and_ln786_4_fu_1062_p2 = (xor_ln786_4_fu_1056_p2 & tmp_28_fu_1040_p3);

assign and_ln786_5_fu_1117_p2 = (xor_ln786_5_fu_1111_p2 & tmp_30_fu_1095_p3);

assign and_ln786_6_fu_1172_p2 = (xor_ln786_6_fu_1166_p2 & tmp_32_fu_1150_p3);

assign and_ln786_7_fu_1227_p2 = (xor_ln786_7_fu_1221_p2 & tmp_34_fu_1205_p3);

assign and_ln786_8_fu_1282_p2 = (xor_ln786_8_fu_1276_p2 & tmp_36_fu_1260_p3);

assign and_ln786_9_fu_1337_p2 = (xor_ln786_9_fu_1331_p2 & tmp_38_fu_1315_p3);

assign and_ln786_fu_842_p2 = (xor_ln786_fu_836_p2 & tmp_fu_820_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op17 == 1'b0))) | ((io_acc_block_signal_op326 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op17 == 1'b0))) | ((io_acc_block_signal_op326 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & ((ap_start == 1'b0) | (io_acc_block_signal_op17 == 1'b0))) | ((io_acc_block_signal_op326 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter15 = (io_acc_block_signal_op326 == 1'b0);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (io_acc_block_signal_op17 == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_sum_V_fu_1775_p2 = (add_ln703_3_reg_2235 + add_ln703_7_fu_1771_p2);

assign exp_table8_address0 = zext_ln236_fu_1701_p1;

assign exp_table8_address1 = zext_ln236_1_fu_1705_p1;

assign exp_table8_address2 = zext_ln236_2_fu_1709_p1;

assign exp_table8_address3 = zext_ln236_7_fu_1713_p1;

assign exp_table8_address4 = zext_ln236_3_fu_1717_p1;

assign exp_table8_address5 = zext_ln236_4_fu_1721_p1;

assign exp_table8_address6 = zext_ln236_5_fu_1725_p1;

assign exp_table8_address7 = zext_ln236_6_fu_1729_p1;

assign exp_table8_address8 = zext_ln236_8_fu_1733_p1;

assign exp_table8_address9 = zext_ln236_9_fu_1737_p1;

assign grp_fu_302_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_303_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_304_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_305_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_306_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_307_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_308_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_309_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_310_p0 = sext_ln1118_fu_1794_p1;

assign grp_fu_311_p0 = sext_ln1118_fu_1794_p1;

assign icmp_ln1496_1_fu_717_p2 = (($signed(data_array_2_V_reg_1961) < $signed(data_array_3_V_reg_1968)) ? 1'b1 : 1'b0);

assign icmp_ln1496_2_fu_739_p2 = (($signed(select_ln85_fu_729_p3) < $signed(select_ln85_1_fu_734_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_3_fu_721_p2 = (($signed(data_array_4_V_reg_1975) < $signed(data_array_5_V_reg_1982)) ? 1'b1 : 1'b0);

assign icmp_ln1496_4_fu_725_p2 = (($signed(data_array_6_V_reg_1989) < $signed(data_array_7_V_reg_1996)) ? 1'b1 : 1'b0);

assign icmp_ln1496_5_fu_763_p2 = (($signed(select_ln85_3_fu_753_p3) < $signed(select_ln85_4_fu_758_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_6_fu_777_p2 = (($signed(select_ln85_2_reg_2037) < $signed(select_ln85_5_reg_2043)) ? 1'b1 : 1'b0);

assign icmp_ln1496_7_fu_787_p2 = (($signed(data_array_8_V_reg_2003_pp0_iter2_reg) < $signed(data_array_9_V_reg_2010_pp0_iter2_reg)) ? 1'b1 : 1'b0);

assign icmp_ln1496_8_fu_796_p2 = (($signed(select_ln85_6_reg_2049) < $signed(select_ln85_7_fu_791_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_713_p2 = (($signed(data_array_0_V_reg_1947) < $signed(data_array_1_V_reg_1954)) ? 1'b1 : 1'b0);

assign invert_table9_address0 = zext_ln244_fu_1790_p1;

assign io_acc_block_signal_op17 = (data_V_data_9_V_empty_n & data_V_data_8_V_empty_n & data_V_data_7_V_empty_n & data_V_data_6_V_empty_n & data_V_data_5_V_empty_n & data_V_data_4_V_empty_n & data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op326 = (res_V_data_9_V_full_n & res_V_data_8_V_full_n & res_V_data_7_V_full_n & res_V_data_6_V_full_n & res_V_data_5_V_full_n & res_V_data_4_V_full_n & res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign or_ln340_1_fu_915_p2 = (xor_ln340_1_fu_909_p2 | tmp_23_fu_883_p3);

assign or_ln340_2_fu_970_p2 = (xor_ln340_2_fu_964_p2 | tmp_25_fu_938_p3);

assign or_ln340_3_fu_1025_p2 = (xor_ln340_3_fu_1019_p2 | tmp_27_fu_993_p3);

assign or_ln340_4_fu_1080_p2 = (xor_ln340_4_fu_1074_p2 | tmp_29_fu_1048_p3);

assign or_ln340_5_fu_1135_p2 = (xor_ln340_5_fu_1129_p2 | tmp_31_fu_1103_p3);

assign or_ln340_6_fu_1190_p2 = (xor_ln340_6_fu_1184_p2 | tmp_33_fu_1158_p3);

assign or_ln340_7_fu_1245_p2 = (xor_ln340_7_fu_1239_p2 | tmp_35_fu_1213_p3);

assign or_ln340_8_fu_1300_p2 = (xor_ln340_8_fu_1294_p2 | tmp_37_fu_1268_p3);

assign or_ln340_9_fu_1355_p2 = (xor_ln340_9_fu_1349_p2 | tmp_39_fu_1323_p3);

assign or_ln340_fu_860_p2 = (xor_ln340_fu_854_p2 | tmp_21_fu_828_p3);

assign res_V_data_0_V_din = tmp_data_0_V_reg_2329;

assign res_V_data_1_V_din = tmp_data_1_V_reg_2334;

assign res_V_data_2_V_din = tmp_data_2_V_reg_2339;

assign res_V_data_3_V_din = tmp_data_3_V_reg_2344;

assign res_V_data_4_V_din = tmp_data_4_V_reg_2349;

assign res_V_data_5_V_din = tmp_data_5_V_reg_2354;

assign res_V_data_6_V_din = tmp_data_6_V_reg_2359;

assign res_V_data_7_V_din = tmp_data_7_V_reg_2364;

assign res_V_data_8_V_din = tmp_data_8_V_reg_2369;

assign res_V_data_9_V_din = tmp_data_9_V_reg_2374;

assign select_ln340_10_fu_1541_p3 = ((xor_ln340_15_fu_1123_p2[0:0] === 1'b1) ? 10'd511 : tmp_16_fu_1531_p4);

assign select_ln340_12_fu_1575_p3 = ((xor_ln340_16_fu_1178_p2[0:0] === 1'b1) ? 10'd511 : tmp_17_fu_1565_p4);

assign select_ln340_14_fu_1609_p3 = ((xor_ln340_17_fu_1233_p2[0:0] === 1'b1) ? 10'd511 : tmp_18_fu_1599_p4);

assign select_ln340_16_fu_1643_p3 = ((xor_ln340_18_fu_1288_p2[0:0] === 1'b1) ? 10'd511 : tmp_19_fu_1633_p4);

assign select_ln340_18_fu_1677_p3 = ((xor_ln340_19_fu_1343_p2[0:0] === 1'b1) ? 10'd511 : tmp_20_fu_1667_p4);

assign select_ln340_2_fu_1405_p3 = ((xor_ln340_11_fu_903_p2[0:0] === 1'b1) ? 10'd511 : tmp_12_fu_1395_p4);

assign select_ln340_4_fu_1439_p3 = ((xor_ln340_12_fu_958_p2[0:0] === 1'b1) ? 10'd511 : tmp_13_fu_1429_p4);

assign select_ln340_6_fu_1473_p3 = ((xor_ln340_13_fu_1013_p2[0:0] === 1'b1) ? 10'd511 : tmp_14_fu_1463_p4);

assign select_ln340_8_fu_1507_p3 = ((xor_ln340_14_fu_1068_p2[0:0] === 1'b1) ? 10'd511 : tmp_15_fu_1497_p4);

assign select_ln340_fu_1371_p3 = ((xor_ln340_10_fu_848_p2[0:0] === 1'b1) ? 10'd511 : tmp_11_fu_1361_p4);

assign select_ln388_1_fu_1413_p3 = ((and_ln786_1_fu_897_p2[0:0] === 1'b1) ? 10'd512 : tmp_12_fu_1395_p4);

assign select_ln388_2_fu_1447_p3 = ((and_ln786_2_fu_952_p2[0:0] === 1'b1) ? 10'd512 : tmp_13_fu_1429_p4);

assign select_ln388_3_fu_1481_p3 = ((and_ln786_3_fu_1007_p2[0:0] === 1'b1) ? 10'd512 : tmp_14_fu_1463_p4);

assign select_ln388_4_fu_1515_p3 = ((and_ln786_4_fu_1062_p2[0:0] === 1'b1) ? 10'd512 : tmp_15_fu_1497_p4);

assign select_ln388_5_fu_1549_p3 = ((and_ln786_5_fu_1117_p2[0:0] === 1'b1) ? 10'd512 : tmp_16_fu_1531_p4);

assign select_ln388_6_fu_1583_p3 = ((and_ln786_6_fu_1172_p2[0:0] === 1'b1) ? 10'd512 : tmp_17_fu_1565_p4);

assign select_ln388_7_fu_1617_p3 = ((and_ln786_7_fu_1227_p2[0:0] === 1'b1) ? 10'd512 : tmp_18_fu_1599_p4);

assign select_ln388_8_fu_1651_p3 = ((and_ln786_8_fu_1282_p2[0:0] === 1'b1) ? 10'd512 : tmp_19_fu_1633_p4);

assign select_ln388_9_fu_1685_p3 = ((and_ln786_9_fu_1337_p2[0:0] === 1'b1) ? 10'd512 : tmp_20_fu_1667_p4);

assign select_ln388_fu_1379_p3 = ((and_ln786_fu_842_p2[0:0] === 1'b1) ? 10'd512 : tmp_11_fu_1361_p4);

assign select_ln85_1_fu_734_p3 = ((icmp_ln1496_1_reg_2022[0:0] === 1'b1) ? data_array_3_V_reg_1968_pp0_iter1_reg : data_array_2_V_reg_1961_pp0_iter1_reg);

assign select_ln85_2_fu_745_p3 = ((icmp_ln1496_2_fu_739_p2[0:0] === 1'b1) ? select_ln85_1_fu_734_p3 : select_ln85_fu_729_p3);

assign select_ln85_3_fu_753_p3 = ((icmp_ln1496_3_reg_2027[0:0] === 1'b1) ? data_array_5_V_reg_1982_pp0_iter1_reg : data_array_4_V_reg_1975_pp0_iter1_reg);

assign select_ln85_4_fu_758_p3 = ((icmp_ln1496_4_reg_2032[0:0] === 1'b1) ? data_array_7_V_reg_1996_pp0_iter1_reg : data_array_6_V_reg_1989_pp0_iter1_reg);

assign select_ln85_5_fu_769_p3 = ((icmp_ln1496_5_fu_763_p2[0:0] === 1'b1) ? select_ln85_4_fu_758_p3 : select_ln85_3_fu_753_p3);

assign select_ln85_6_fu_781_p3 = ((icmp_ln1496_6_fu_777_p2[0:0] === 1'b1) ? select_ln85_5_reg_2043 : select_ln85_2_reg_2037);

assign select_ln85_7_fu_791_p3 = ((icmp_ln1496_7_reg_2055[0:0] === 1'b1) ? data_array_9_V_reg_2010_pp0_iter3_reg : data_array_8_V_reg_2003_pp0_iter3_reg);

assign select_ln85_fu_729_p3 = ((icmp_ln1496_reg_2017[0:0] === 1'b1) ? data_array_1_V_reg_1954_pp0_iter1_reg : data_array_0_V_reg_1947_pp0_iter1_reg);

assign sext_ln1118_fu_1794_p1 = $signed(inv_exp_sum_V_reg_2260);

assign sext_ln703_10_fu_1306_p1 = data_array_9_V_reg_2010_pp0_iter4_reg;

assign sext_ln703_1_fu_811_p1 = $signed(x_max_V_reg_2060);

assign sext_ln703_2_fu_866_p1 = data_array_1_V_reg_1954_pp0_iter4_reg;

assign sext_ln703_3_fu_921_p1 = data_array_2_V_reg_1961_pp0_iter4_reg;

assign sext_ln703_4_fu_976_p1 = data_array_3_V_reg_1968_pp0_iter4_reg;

assign sext_ln703_5_fu_1031_p1 = data_array_4_V_reg_1975_pp0_iter4_reg;

assign sext_ln703_6_fu_1086_p1 = data_array_5_V_reg_1982_pp0_iter4_reg;

assign sext_ln703_7_fu_1141_p1 = data_array_6_V_reg_1989_pp0_iter4_reg;

assign sext_ln703_8_fu_1196_p1 = data_array_7_V_reg_1996_pp0_iter4_reg;

assign sext_ln703_9_fu_1251_p1 = data_array_8_V_reg_2003_pp0_iter4_reg;

assign sext_ln703_fu_808_p1 = data_array_0_V_reg_1947_pp0_iter4_reg;

assign sub_ln1193_1_fu_869_p2 = ($signed(sext_ln703_2_fu_866_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_2_fu_924_p2 = ($signed(sext_ln703_3_fu_921_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_3_fu_979_p2 = ($signed(sext_ln703_4_fu_976_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_4_fu_1034_p2 = ($signed(sext_ln703_5_fu_1031_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_5_fu_1089_p2 = ($signed(sext_ln703_6_fu_1086_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_6_fu_1144_p2 = ($signed(sext_ln703_7_fu_1141_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_7_fu_1199_p2 = ($signed(sext_ln703_8_fu_1196_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_8_fu_1254_p2 = ($signed(sext_ln703_9_fu_1251_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_9_fu_1309_p2 = ($signed(sext_ln703_10_fu_1306_p1) - $signed(sext_ln703_1_fu_811_p1));

assign sub_ln1193_fu_814_p2 = ($signed(sext_ln703_fu_808_p1) - $signed(sext_ln703_1_fu_811_p1));

assign tmp_11_fu_1361_p4 = {{sub_ln1193_fu_814_p2[15:6]}};

assign tmp_12_fu_1395_p4 = {{sub_ln1193_1_fu_869_p2[15:6]}};

assign tmp_13_fu_1429_p4 = {{sub_ln1193_2_fu_924_p2[15:6]}};

assign tmp_14_fu_1463_p4 = {{sub_ln1193_3_fu_979_p2[15:6]}};

assign tmp_15_fu_1497_p4 = {{sub_ln1193_4_fu_1034_p2[15:6]}};

assign tmp_16_fu_1531_p4 = {{sub_ln1193_5_fu_1089_p2[15:6]}};

assign tmp_17_fu_1565_p4 = {{sub_ln1193_6_fu_1144_p2[15:6]}};

assign tmp_18_fu_1599_p4 = {{sub_ln1193_7_fu_1199_p2[15:6]}};

assign tmp_19_fu_1633_p4 = {{sub_ln1193_8_fu_1254_p2[15:6]}};

assign tmp_20_fu_1667_p4 = {{sub_ln1193_9_fu_1309_p2[15:6]}};

assign tmp_21_fu_828_p3 = sub_ln1193_fu_814_p2[32'd15];

assign tmp_22_fu_875_p3 = sub_ln1193_1_fu_869_p2[32'd16];

assign tmp_23_fu_883_p3 = sub_ln1193_1_fu_869_p2[32'd15];

assign tmp_24_fu_930_p3 = sub_ln1193_2_fu_924_p2[32'd16];

assign tmp_25_fu_938_p3 = sub_ln1193_2_fu_924_p2[32'd15];

assign tmp_26_fu_985_p3 = sub_ln1193_3_fu_979_p2[32'd16];

assign tmp_27_fu_993_p3 = sub_ln1193_3_fu_979_p2[32'd15];

assign tmp_28_fu_1040_p3 = sub_ln1193_4_fu_1034_p2[32'd16];

assign tmp_29_fu_1048_p3 = sub_ln1193_4_fu_1034_p2[32'd15];

assign tmp_30_fu_1095_p3 = sub_ln1193_5_fu_1089_p2[32'd16];

assign tmp_31_fu_1103_p3 = sub_ln1193_5_fu_1089_p2[32'd15];

assign tmp_32_fu_1150_p3 = sub_ln1193_6_fu_1144_p2[32'd16];

assign tmp_33_fu_1158_p3 = sub_ln1193_6_fu_1144_p2[32'd15];

assign tmp_34_fu_1205_p3 = sub_ln1193_7_fu_1199_p2[32'd16];

assign tmp_35_fu_1213_p3 = sub_ln1193_7_fu_1199_p2[32'd15];

assign tmp_36_fu_1260_p3 = sub_ln1193_8_fu_1254_p2[32'd16];

assign tmp_37_fu_1268_p3 = sub_ln1193_8_fu_1254_p2[32'd15];

assign tmp_38_fu_1315_p3 = sub_ln1193_9_fu_1309_p2[32'd16];

assign tmp_39_fu_1323_p3 = sub_ln1193_9_fu_1309_p2[32'd15];

assign tmp_fu_820_p3 = sub_ln1193_fu_814_p2[32'd16];

assign x_max_V_fu_801_p3 = ((icmp_ln1496_8_fu_796_p2[0:0] === 1'b1) ? select_ln85_7_fu_791_p3 : select_ln85_6_reg_2049);

assign xor_ln340_10_fu_848_p2 = (tmp_fu_820_p3 ^ tmp_21_fu_828_p3);

assign xor_ln340_11_fu_903_p2 = (tmp_23_fu_883_p3 ^ tmp_22_fu_875_p3);

assign xor_ln340_12_fu_958_p2 = (tmp_25_fu_938_p3 ^ tmp_24_fu_930_p3);

assign xor_ln340_13_fu_1013_p2 = (tmp_27_fu_993_p3 ^ tmp_26_fu_985_p3);

assign xor_ln340_14_fu_1068_p2 = (tmp_29_fu_1048_p3 ^ tmp_28_fu_1040_p3);

assign xor_ln340_15_fu_1123_p2 = (tmp_31_fu_1103_p3 ^ tmp_30_fu_1095_p3);

assign xor_ln340_16_fu_1178_p2 = (tmp_33_fu_1158_p3 ^ tmp_32_fu_1150_p3);

assign xor_ln340_17_fu_1233_p2 = (tmp_35_fu_1213_p3 ^ tmp_34_fu_1205_p3);

assign xor_ln340_18_fu_1288_p2 = (tmp_37_fu_1268_p3 ^ tmp_36_fu_1260_p3);

assign xor_ln340_19_fu_1343_p2 = (tmp_39_fu_1323_p3 ^ tmp_38_fu_1315_p3);

assign xor_ln340_1_fu_909_p2 = (tmp_22_fu_875_p3 ^ 1'd1);

assign xor_ln340_2_fu_964_p2 = (tmp_24_fu_930_p3 ^ 1'd1);

assign xor_ln340_3_fu_1019_p2 = (tmp_26_fu_985_p3 ^ 1'd1);

assign xor_ln340_4_fu_1074_p2 = (tmp_28_fu_1040_p3 ^ 1'd1);

assign xor_ln340_5_fu_1129_p2 = (tmp_30_fu_1095_p3 ^ 1'd1);

assign xor_ln340_6_fu_1184_p2 = (tmp_32_fu_1150_p3 ^ 1'd1);

assign xor_ln340_7_fu_1239_p2 = (tmp_34_fu_1205_p3 ^ 1'd1);

assign xor_ln340_8_fu_1294_p2 = (tmp_36_fu_1260_p3 ^ 1'd1);

assign xor_ln340_9_fu_1349_p2 = (tmp_38_fu_1315_p3 ^ 1'd1);

assign xor_ln340_fu_854_p2 = (tmp_fu_820_p3 ^ 1'd1);

assign xor_ln786_1_fu_891_p2 = (tmp_23_fu_883_p3 ^ 1'd1);

assign xor_ln786_2_fu_946_p2 = (tmp_25_fu_938_p3 ^ 1'd1);

assign xor_ln786_3_fu_1001_p2 = (tmp_27_fu_993_p3 ^ 1'd1);

assign xor_ln786_4_fu_1056_p2 = (tmp_29_fu_1048_p3 ^ 1'd1);

assign xor_ln786_5_fu_1111_p2 = (tmp_31_fu_1103_p3 ^ 1'd1);

assign xor_ln786_6_fu_1166_p2 = (tmp_33_fu_1158_p3 ^ 1'd1);

assign xor_ln786_7_fu_1221_p2 = (tmp_35_fu_1213_p3 ^ 1'd1);

assign xor_ln786_8_fu_1276_p2 = (tmp_37_fu_1268_p3 ^ 1'd1);

assign xor_ln786_9_fu_1331_p2 = (tmp_39_fu_1323_p3 ^ 1'd1);

assign xor_ln786_fu_836_p2 = (tmp_21_fu_828_p3 ^ 1'd1);

assign y_V_1_fu_1421_p3 = ((or_ln340_1_fu_915_p2[0:0] === 1'b1) ? select_ln340_2_fu_1405_p3 : select_ln388_1_fu_1413_p3);

assign y_V_2_fu_1455_p3 = ((or_ln340_2_fu_970_p2[0:0] === 1'b1) ? select_ln340_4_fu_1439_p3 : select_ln388_2_fu_1447_p3);

assign y_V_3_fu_1489_p3 = ((or_ln340_3_fu_1025_p2[0:0] === 1'b1) ? select_ln340_6_fu_1473_p3 : select_ln388_3_fu_1481_p3);

assign y_V_4_fu_1523_p3 = ((or_ln340_4_fu_1080_p2[0:0] === 1'b1) ? select_ln340_8_fu_1507_p3 : select_ln388_4_fu_1515_p3);

assign y_V_5_fu_1557_p3 = ((or_ln340_5_fu_1135_p2[0:0] === 1'b1) ? select_ln340_10_fu_1541_p3 : select_ln388_5_fu_1549_p3);

assign y_V_6_fu_1591_p3 = ((or_ln340_6_fu_1190_p2[0:0] === 1'b1) ? select_ln340_12_fu_1575_p3 : select_ln388_6_fu_1583_p3);

assign y_V_7_fu_1625_p3 = ((or_ln340_7_fu_1245_p2[0:0] === 1'b1) ? select_ln340_14_fu_1609_p3 : select_ln388_7_fu_1617_p3);

assign y_V_8_fu_1659_p3 = ((or_ln340_8_fu_1300_p2[0:0] === 1'b1) ? select_ln340_16_fu_1643_p3 : select_ln388_8_fu_1651_p3);

assign y_V_9_fu_1693_p3 = ((or_ln340_9_fu_1355_p2[0:0] === 1'b1) ? select_ln340_18_fu_1677_p3 : select_ln388_9_fu_1685_p3);

assign y_V_fu_1387_p3 = ((or_ln340_fu_860_p2[0:0] === 1'b1) ? select_ln340_fu_1371_p3 : select_ln388_fu_1379_p3);

assign zext_ln236_1_fu_1705_p1 = y_V_1_reg_2070;

assign zext_ln236_2_fu_1709_p1 = y_V_2_reg_2075;

assign zext_ln236_3_fu_1717_p1 = y_V_3_reg_2080_pp0_iter6_reg;

assign zext_ln236_4_fu_1721_p1 = y_V_4_reg_2085_pp0_iter6_reg;

assign zext_ln236_5_fu_1725_p1 = y_V_5_reg_2090_pp0_iter6_reg;

assign zext_ln236_6_fu_1729_p1 = y_V_6_reg_2095_pp0_iter6_reg;

assign zext_ln236_7_fu_1713_p1 = y_V_7_reg_2100;

assign zext_ln236_8_fu_1733_p1 = y_V_8_reg_2105_pp0_iter6_reg;

assign zext_ln236_9_fu_1737_p1 = y_V_9_reg_2110_pp0_iter6_reg;

assign zext_ln236_fu_1701_p1 = y_V_reg_2065;

assign zext_ln244_fu_1790_p1 = y_V_10_reg_2250;

endmodule //softmax_stable_array_array_softmax_config12_s
