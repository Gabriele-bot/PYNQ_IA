// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _reduce_ap_fixed_4_Op_max_ap_fixed_16_6_5_3_0_s_HH_
#define _reduce_ap_fixed_4_Op_max_ap_fixed_16_6_5_3_0_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct reduce_ap_fixed_4_Op_max_ap_fixed_16_6_5_3_0_s : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<16> > x_0_V;
    sc_in< sc_lv<16> > x_1_V;
    sc_in< sc_lv<16> > x_2_V;
    sc_in< sc_lv<16> > x_3_V;
    sc_out< sc_lv<12> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    reduce_ap_fixed_4_Op_max_ap_fixed_16_6_5_3_0_s(sc_module_name name);
    SC_HAS_PROCESS(reduce_ap_fixed_4_Op_max_ap_fixed_16_6_5_3_0_s);

    ~reduce_ap_fixed_4_Op_max_ap_fixed_16_6_5_3_0_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<12> > select_ln85_fu_48_p3;
    sc_signal< sc_lv<12> > select_ln85_reg_88;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<12> > select_ln85_9_fu_70_p3;
    sc_signal< sc_lv<12> > select_ln85_9_reg_94;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<12> > trunc_ln52_fu_34_p1;
    sc_signal< sc_lv<12> > trunc_ln1496_fu_38_p1;
    sc_signal< sc_lv<1> > icmp_ln1496_fu_42_p2;
    sc_signal< sc_lv<12> > trunc_ln52_1_fu_56_p1;
    sc_signal< sc_lv<12> > trunc_ln1496_1_fu_60_p1;
    sc_signal< sc_lv<1> > icmp_ln1496_9_fu_64_p2;
    sc_signal< sc_lv<1> > icmp_ln1496_10_fu_78_p2;
    sc_signal< sc_lv<12> > select_ln85_10_fu_82_p3;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<12> > ap_return_int_reg;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_return();
    void thread_icmp_ln1496_10_fu_78_p2();
    void thread_icmp_ln1496_9_fu_64_p2();
    void thread_icmp_ln1496_fu_42_p2();
    void thread_select_ln85_10_fu_82_p3();
    void thread_select_ln85_9_fu_70_p3();
    void thread_select_ln85_fu_48_p3();
    void thread_trunc_ln1496_1_fu_60_p1();
    void thread_trunc_ln1496_fu_38_p1();
    void thread_trunc_ln52_1_fu_56_p1();
    void thread_trunc_ln52_fu_34_p1();
};

}

using namespace ap_rtl;

#endif
