// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module reduce_ap_fixed_4_Op_max_ap_fixed_16_6_5_3_0_s (
        ap_clk,
        ap_rst,
        x_0_V,
        x_1_V,
        x_2_V,
        x_3_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [15:0] x_0_V;
input  [15:0] x_1_V;
input  [15:0] x_2_V;
input  [15:0] x_3_V;
output  [11:0] ap_return;
input   ap_ce;

reg[11:0] ap_return;

wire   [11:0] select_ln85_fu_48_p3;
reg   [11:0] select_ln85_reg_88;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [11:0] select_ln85_9_fu_70_p3;
reg   [11:0] select_ln85_9_reg_94;
wire    ap_block_pp0_stage0;
wire   [11:0] trunc_ln52_fu_34_p1;
wire   [11:0] trunc_ln1496_fu_38_p1;
wire   [0:0] icmp_ln1496_fu_42_p2;
wire   [11:0] trunc_ln52_1_fu_56_p1;
wire   [11:0] trunc_ln1496_1_fu_60_p1;
wire   [0:0] icmp_ln1496_9_fu_64_p2;
wire   [0:0] icmp_ln1496_10_fu_78_p2;
wire   [11:0] select_ln85_10_fu_82_p3;
reg    ap_ce_reg;
reg   [11:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln85_10_fu_82_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln85_9_reg_94 <= select_ln85_9_fu_70_p3;
        select_ln85_reg_88 <= select_ln85_fu_48_p3;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln85_10_fu_82_p3;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign icmp_ln1496_10_fu_78_p2 = (($signed(select_ln85_reg_88) < $signed(select_ln85_9_reg_94)) ? 1'b1 : 1'b0);

assign icmp_ln1496_9_fu_64_p2 = (($signed(trunc_ln52_1_fu_56_p1) < $signed(trunc_ln1496_1_fu_60_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_42_p2 = (($signed(trunc_ln52_fu_34_p1) < $signed(trunc_ln1496_fu_38_p1)) ? 1'b1 : 1'b0);

assign select_ln85_10_fu_82_p3 = ((icmp_ln1496_10_fu_78_p2[0:0] === 1'b1) ? select_ln85_9_reg_94 : select_ln85_reg_88);

assign select_ln85_9_fu_70_p3 = ((icmp_ln1496_9_fu_64_p2[0:0] === 1'b1) ? trunc_ln1496_1_fu_60_p1 : trunc_ln52_1_fu_56_p1);

assign select_ln85_fu_48_p3 = ((icmp_ln1496_fu_42_p2[0:0] === 1'b1) ? trunc_ln1496_fu_38_p1 : trunc_ln52_fu_34_p1);

assign trunc_ln1496_1_fu_60_p1 = x_3_V[11:0];

assign trunc_ln1496_fu_38_p1 = x_1_V[11:0];

assign trunc_ln52_1_fu_56_p1 = x_2_V[11:0];

assign trunc_ln52_fu_34_p1 = x_0_V[11:0];

endmodule //reduce_ap_fixed_4_Op_max_ap_fixed_16_6_5_3_0_s
