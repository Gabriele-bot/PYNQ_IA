// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject_axi,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.325000,HLS_SYN_LAT=196777,HLS_SYN_TPT=none,HLS_SYN_MEM=248,HLS_SYN_DSP=113,HLS_SYN_FF=43438,HLS_SYN_LUT=49677,HLS_VERSION=2020_1}" *)

module myproject_axi (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

 reg    ap_rst_n_inv;
wire   [9:0] in_V_address0;
reg    in_V_ce0;
wire   [15:0] in_V_q0;
wire   [3:0] out_V_address0;
reg    out_V_ce0;
reg    out_V_we0;
wire   [9:0] i_fu_272_p2;
reg   [9:0] i_reg_425;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln21_fu_266_p2;
reg   [15:0] ctype_data_V_reg_435;
wire    ap_CS_fsm_state3;
reg   [15:0] tmp_data_V_0_reg_440;
wire    ap_CS_fsm_state6;
wire   [15:0] out_local_V_data_0_V_dout;
wire    out_local_V_data_0_V_empty_n;
reg    out_local_V_data_0_V_read;
wire   [15:0] out_local_V_data_1_V_dout;
wire    out_local_V_data_1_V_empty_n;
reg    out_local_V_data_1_V_read;
wire   [15:0] out_local_V_data_2_V_dout;
wire    out_local_V_data_2_V_empty_n;
reg    out_local_V_data_2_V_read;
wire   [15:0] out_local_V_data_3_V_dout;
wire    out_local_V_data_3_V_empty_n;
reg    out_local_V_data_3_V_read;
wire   [15:0] out_local_V_data_4_V_dout;
wire    out_local_V_data_4_V_empty_n;
reg    out_local_V_data_4_V_read;
wire   [15:0] out_local_V_data_5_V_dout;
wire    out_local_V_data_5_V_empty_n;
reg    out_local_V_data_5_V_read;
wire   [15:0] out_local_V_data_6_V_dout;
wire    out_local_V_data_6_V_empty_n;
reg    out_local_V_data_6_V_read;
wire   [15:0] out_local_V_data_7_V_dout;
wire    out_local_V_data_7_V_empty_n;
reg    out_local_V_data_7_V_read;
wire   [15:0] out_local_V_data_8_V_dout;
wire    out_local_V_data_8_V_empty_n;
reg    out_local_V_data_8_V_read;
wire   [15:0] out_local_V_data_9_V_dout;
wire    out_local_V_data_9_V_empty_n;
reg    out_local_V_data_9_V_read;
wire    io_acc_block_signal_op64;
reg   [15:0] tmp_data_V_1_reg_445;
reg   [15:0] tmp_data_V_2_reg_450;
reg   [15:0] tmp_data_V_3_reg_455;
reg   [15:0] tmp_data_V_4_reg_460;
reg   [15:0] tmp_data_V_5_reg_465;
reg   [15:0] tmp_data_V_6_reg_470;
reg   [15:0] tmp_data_V_7_reg_475;
reg   [15:0] tmp_data_V_8_reg_480;
reg   [15:0] tmp_data_V_98_reg_485;
wire   [3:0] j_fu_329_p2;
reg   [3:0] j_reg_493;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_fu_335_p12;
reg   [15:0] tmp_reg_498;
wire   [0:0] icmp_ln34_fu_323_p2;
wire    grp_myproject_fu_229_layer0_V_data_V_read;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_0_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_0_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_1_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_1_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_2_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_2_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_3_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_3_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_4_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_4_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_5_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_5_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_6_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_6_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_7_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_7_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_8_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_8_V_write;
wire   [15:0] grp_myproject_fu_229_layer12_out_V_data_9_V_din;
wire    grp_myproject_fu_229_layer12_out_V_data_9_V_write;
wire    grp_myproject_fu_229_ap_start;
wire    grp_myproject_fu_229_ap_done;
wire    grp_myproject_fu_229_ap_ready;
wire    grp_myproject_fu_229_ap_idle;
reg    grp_myproject_fu_229_ap_continue;
reg   [9:0] i_0_reg_206;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state4;
wire    in_local_V_data_0_V_full_n;
reg    in_local_V_data_0_V_write;
reg   [3:0] j3_0_reg_217;
wire    ap_CS_fsm_state8;
reg    grp_myproject_fu_229_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_sync_grp_myproject_fu_229_ap_ready;
wire    ap_sync_grp_myproject_fu_229_ap_done;
reg    ap_block_state5_on_subcall_done;
reg    ap_sync_reg_grp_myproject_fu_229_ap_ready;
reg    ap_sync_reg_grp_myproject_fu_229_ap_done;
wire   [15:0] in_local_V_data_0_V_dout;
wire    in_local_V_data_0_V_empty_n;
reg    in_local_V_data_0_V_read;
wire    out_local_V_data_0_V_full_n;
reg    out_local_V_data_0_V_write;
wire    out_local_V_data_1_V_full_n;
reg    out_local_V_data_1_V_write;
wire    out_local_V_data_2_V_full_n;
reg    out_local_V_data_2_V_write;
wire    out_local_V_data_3_V_full_n;
reg    out_local_V_data_3_V_write;
wire    out_local_V_data_4_V_full_n;
reg    out_local_V_data_4_V_write;
wire    out_local_V_data_5_V_full_n;
reg    out_local_V_data_5_V_write;
wire    out_local_V_data_6_V_full_n;
reg    out_local_V_data_6_V_write;
wire    out_local_V_data_7_V_full_n;
reg    out_local_V_data_7_V_write;
wire    out_local_V_data_8_V_full_n;
reg    out_local_V_data_8_V_write;
wire    out_local_V_data_9_V_full_n;
reg    out_local_V_data_9_V_write;
wire   [63:0] zext_ln25_fu_278_p1;
wire   [63:0] zext_ln35_fu_351_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 grp_myproject_fu_229_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_myproject_fu_229_ap_ready = 1'b0;
#0 ap_sync_reg_grp_myproject_fu_229_ap_done = 1'b0;
end

myproject_axi_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
myproject_axi_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .in_V_address0(in_V_address0),
    .in_V_ce0(in_V_ce0),
    .in_V_q0(in_V_q0),
    .out_V_address0(out_V_address0),
    .out_V_ce0(out_V_ce0),
    .out_V_we0(out_V_we0),
    .out_V_d0(tmp_reg_498)
);

myproject grp_myproject_fu_229(
    .layer0_V_data_V_dout(in_local_V_data_0_V_dout),
    .layer0_V_data_V_empty_n(in_local_V_data_0_V_empty_n),
    .layer0_V_data_V_read(grp_myproject_fu_229_layer0_V_data_V_read),
    .layer12_out_V_data_0_V_din(grp_myproject_fu_229_layer12_out_V_data_0_V_din),
    .layer12_out_V_data_0_V_full_n(out_local_V_data_0_V_full_n),
    .layer12_out_V_data_0_V_write(grp_myproject_fu_229_layer12_out_V_data_0_V_write),
    .layer12_out_V_data_1_V_din(grp_myproject_fu_229_layer12_out_V_data_1_V_din),
    .layer12_out_V_data_1_V_full_n(out_local_V_data_1_V_full_n),
    .layer12_out_V_data_1_V_write(grp_myproject_fu_229_layer12_out_V_data_1_V_write),
    .layer12_out_V_data_2_V_din(grp_myproject_fu_229_layer12_out_V_data_2_V_din),
    .layer12_out_V_data_2_V_full_n(out_local_V_data_2_V_full_n),
    .layer12_out_V_data_2_V_write(grp_myproject_fu_229_layer12_out_V_data_2_V_write),
    .layer12_out_V_data_3_V_din(grp_myproject_fu_229_layer12_out_V_data_3_V_din),
    .layer12_out_V_data_3_V_full_n(out_local_V_data_3_V_full_n),
    .layer12_out_V_data_3_V_write(grp_myproject_fu_229_layer12_out_V_data_3_V_write),
    .layer12_out_V_data_4_V_din(grp_myproject_fu_229_layer12_out_V_data_4_V_din),
    .layer12_out_V_data_4_V_full_n(out_local_V_data_4_V_full_n),
    .layer12_out_V_data_4_V_write(grp_myproject_fu_229_layer12_out_V_data_4_V_write),
    .layer12_out_V_data_5_V_din(grp_myproject_fu_229_layer12_out_V_data_5_V_din),
    .layer12_out_V_data_5_V_full_n(out_local_V_data_5_V_full_n),
    .layer12_out_V_data_5_V_write(grp_myproject_fu_229_layer12_out_V_data_5_V_write),
    .layer12_out_V_data_6_V_din(grp_myproject_fu_229_layer12_out_V_data_6_V_din),
    .layer12_out_V_data_6_V_full_n(out_local_V_data_6_V_full_n),
    .layer12_out_V_data_6_V_write(grp_myproject_fu_229_layer12_out_V_data_6_V_write),
    .layer12_out_V_data_7_V_din(grp_myproject_fu_229_layer12_out_V_data_7_V_din),
    .layer12_out_V_data_7_V_full_n(out_local_V_data_7_V_full_n),
    .layer12_out_V_data_7_V_write(grp_myproject_fu_229_layer12_out_V_data_7_V_write),
    .layer12_out_V_data_8_V_din(grp_myproject_fu_229_layer12_out_V_data_8_V_din),
    .layer12_out_V_data_8_V_full_n(out_local_V_data_8_V_full_n),
    .layer12_out_V_data_8_V_write(grp_myproject_fu_229_layer12_out_V_data_8_V_write),
    .layer12_out_V_data_9_V_din(grp_myproject_fu_229_layer12_out_V_data_9_V_din),
    .layer12_out_V_data_9_V_full_n(out_local_V_data_9_V_full_n),
    .layer12_out_V_data_9_V_write(grp_myproject_fu_229_layer12_out_V_data_9_V_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_myproject_fu_229_ap_start),
    .ap_done(grp_myproject_fu_229_ap_done),
    .ap_ready(grp_myproject_fu_229_ap_ready),
    .ap_idle(grp_myproject_fu_229_ap_idle),
    .ap_continue(grp_myproject_fu_229_ap_continue)
);

myproject_axi_mux_104_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
myproject_axi_mux_104_16_1_1_U1194(
    .din0(tmp_data_V_0_reg_440),
    .din1(tmp_data_V_1_reg_445),
    .din2(tmp_data_V_2_reg_450),
    .din3(tmp_data_V_3_reg_455),
    .din4(tmp_data_V_4_reg_460),
    .din5(tmp_data_V_5_reg_465),
    .din6(tmp_data_V_6_reg_470),
    .din7(tmp_data_V_7_reg_475),
    .din8(tmp_data_V_8_reg_480),
    .din9(tmp_data_V_98_reg_485),
    .din10(j3_0_reg_217),
    .dout(tmp_fu_335_p12)
);

fifo_w16_d784_A in_local_V_data_0_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(ctype_data_V_reg_435),
    .if_full_n(in_local_V_data_0_V_full_n),
    .if_write(in_local_V_data_0_V_write),
    .if_dout(in_local_V_data_0_V_dout),
    .if_empty_n(in_local_V_data_0_V_empty_n),
    .if_read(in_local_V_data_0_V_read)
);

fifo_w16_d10_A out_local_V_data_0_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_0_V_din),
    .if_full_n(out_local_V_data_0_V_full_n),
    .if_write(out_local_V_data_0_V_write),
    .if_dout(out_local_V_data_0_V_dout),
    .if_empty_n(out_local_V_data_0_V_empty_n),
    .if_read(out_local_V_data_0_V_read)
);

fifo_w16_d10_A out_local_V_data_1_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_1_V_din),
    .if_full_n(out_local_V_data_1_V_full_n),
    .if_write(out_local_V_data_1_V_write),
    .if_dout(out_local_V_data_1_V_dout),
    .if_empty_n(out_local_V_data_1_V_empty_n),
    .if_read(out_local_V_data_1_V_read)
);

fifo_w16_d10_A out_local_V_data_2_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_2_V_din),
    .if_full_n(out_local_V_data_2_V_full_n),
    .if_write(out_local_V_data_2_V_write),
    .if_dout(out_local_V_data_2_V_dout),
    .if_empty_n(out_local_V_data_2_V_empty_n),
    .if_read(out_local_V_data_2_V_read)
);

fifo_w16_d10_A out_local_V_data_3_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_3_V_din),
    .if_full_n(out_local_V_data_3_V_full_n),
    .if_write(out_local_V_data_3_V_write),
    .if_dout(out_local_V_data_3_V_dout),
    .if_empty_n(out_local_V_data_3_V_empty_n),
    .if_read(out_local_V_data_3_V_read)
);

fifo_w16_d10_A out_local_V_data_4_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_4_V_din),
    .if_full_n(out_local_V_data_4_V_full_n),
    .if_write(out_local_V_data_4_V_write),
    .if_dout(out_local_V_data_4_V_dout),
    .if_empty_n(out_local_V_data_4_V_empty_n),
    .if_read(out_local_V_data_4_V_read)
);

fifo_w16_d10_A out_local_V_data_5_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_5_V_din),
    .if_full_n(out_local_V_data_5_V_full_n),
    .if_write(out_local_V_data_5_V_write),
    .if_dout(out_local_V_data_5_V_dout),
    .if_empty_n(out_local_V_data_5_V_empty_n),
    .if_read(out_local_V_data_5_V_read)
);

fifo_w16_d10_A out_local_V_data_6_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_6_V_din),
    .if_full_n(out_local_V_data_6_V_full_n),
    .if_write(out_local_V_data_6_V_write),
    .if_dout(out_local_V_data_6_V_dout),
    .if_empty_n(out_local_V_data_6_V_empty_n),
    .if_read(out_local_V_data_6_V_read)
);

fifo_w16_d10_A out_local_V_data_7_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_7_V_din),
    .if_full_n(out_local_V_data_7_V_full_n),
    .if_write(out_local_V_data_7_V_write),
    .if_dout(out_local_V_data_7_V_dout),
    .if_empty_n(out_local_V_data_7_V_empty_n),
    .if_read(out_local_V_data_7_V_read)
);

fifo_w16_d10_A out_local_V_data_8_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_8_V_din),
    .if_full_n(out_local_V_data_8_V_full_n),
    .if_write(out_local_V_data_8_V_write),
    .if_dout(out_local_V_data_8_V_dout),
    .if_empty_n(out_local_V_data_8_V_empty_n),
    .if_read(out_local_V_data_8_V_read)
);

fifo_w16_d10_A out_local_V_data_9_V_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_myproject_fu_229_layer12_out_V_data_9_V_din),
    .if_full_n(out_local_V_data_9_V_full_n),
    .if_write(out_local_V_data_9_V_write),
    .if_dout(out_local_V_data_9_V_dout),
    .if_empty_n(out_local_V_data_9_V_empty_n),
    .if_read(out_local_V_data_9_V_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myproject_fu_229_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_sync_reg_grp_myproject_fu_229_ap_done <= 1'b0;
        end else if ((grp_myproject_fu_229_ap_done == 1'b1)) begin
            ap_sync_reg_grp_myproject_fu_229_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_myproject_fu_229_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_sync_reg_grp_myproject_fu_229_ap_ready <= 1'b0;
        end else if ((grp_myproject_fu_229_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_myproject_fu_229_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_myproject_fu_229_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln21_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_sync_grp_myproject_fu_229_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
            grp_myproject_fu_229_ap_start_reg <= 1'b1;
        end else if ((grp_myproject_fu_229_ap_ready == 1'b1)) begin
            grp_myproject_fu_229_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((in_local_V_data_0_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_206 <= i_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_206 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j3_0_reg_217 <= j_reg_493;
    end else if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        j3_0_reg_217 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctype_data_V_reg_435 <= in_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_425 <= i_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_493 <= j_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        tmp_data_V_0_reg_440 <= out_local_V_data_0_V_dout;
        tmp_data_V_1_reg_445 <= out_local_V_data_1_V_dout;
        tmp_data_V_2_reg_450 <= out_local_V_data_2_V_dout;
        tmp_data_V_3_reg_455 <= out_local_V_data_3_V_dout;
        tmp_data_V_4_reg_460 <= out_local_V_data_4_V_dout;
        tmp_data_V_5_reg_465 <= out_local_V_data_5_V_dout;
        tmp_data_V_6_reg_470 <= out_local_V_data_6_V_dout;
        tmp_data_V_7_reg_475 <= out_local_V_data_7_V_dout;
        tmp_data_V_8_reg_480 <= out_local_V_data_8_V_dout;
        tmp_data_V_98_reg_485 <= out_local_V_data_9_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_reg_498 <= tmp_fu_335_p12;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
        grp_myproject_fu_229_ap_continue = 1'b1;
    end else begin
        grp_myproject_fu_229_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_V_ce0 = 1'b1;
    end else begin
        in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_local_V_data_0_V_read = grp_myproject_fu_229_layer0_V_data_V_read;
    end else begin
        in_local_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((in_local_V_data_0_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        in_local_V_data_0_V_write = 1'b1;
    end else begin
        in_local_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_0_V_read = 1'b1;
    end else begin
        out_local_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_0_V_write = grp_myproject_fu_229_layer12_out_V_data_0_V_write;
    end else begin
        out_local_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_1_V_read = 1'b1;
    end else begin
        out_local_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_1_V_write = grp_myproject_fu_229_layer12_out_V_data_1_V_write;
    end else begin
        out_local_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_2_V_read = 1'b1;
    end else begin
        out_local_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_2_V_write = grp_myproject_fu_229_layer12_out_V_data_2_V_write;
    end else begin
        out_local_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_3_V_read = 1'b1;
    end else begin
        out_local_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_3_V_write = grp_myproject_fu_229_layer12_out_V_data_3_V_write;
    end else begin
        out_local_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_4_V_read = 1'b1;
    end else begin
        out_local_V_data_4_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_4_V_write = grp_myproject_fu_229_layer12_out_V_data_4_V_write;
    end else begin
        out_local_V_data_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_5_V_read = 1'b1;
    end else begin
        out_local_V_data_5_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_5_V_write = grp_myproject_fu_229_layer12_out_V_data_5_V_write;
    end else begin
        out_local_V_data_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_6_V_read = 1'b1;
    end else begin
        out_local_V_data_6_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_6_V_write = grp_myproject_fu_229_layer12_out_V_data_6_V_write;
    end else begin
        out_local_V_data_6_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_7_V_read = 1'b1;
    end else begin
        out_local_V_data_7_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_7_V_write = grp_myproject_fu_229_layer12_out_V_data_7_V_write;
    end else begin
        out_local_V_data_7_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_8_V_read = 1'b1;
    end else begin
        out_local_V_data_8_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_8_V_write = grp_myproject_fu_229_layer12_out_V_data_8_V_write;
    end else begin
        out_local_V_data_8_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
        out_local_V_data_9_V_read = 1'b1;
    end else begin
        out_local_V_data_9_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_local_V_data_9_V_write = grp_myproject_fu_229_layer12_out_V_data_9_V_write;
    end else begin
        out_local_V_data_9_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln21_fu_266_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((in_local_V_data_0_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_on_subcall_done) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (io_acc_block_signal_op64 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln34_fu_323_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state5_on_subcall_done = ((ap_sync_grp_myproject_fu_229_ap_ready & ap_sync_grp_myproject_fu_229_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_myproject_fu_229_ap_done = (grp_myproject_fu_229_ap_done | ap_sync_reg_grp_myproject_fu_229_ap_done);

assign ap_sync_grp_myproject_fu_229_ap_ready = (grp_myproject_fu_229_ap_ready | ap_sync_reg_grp_myproject_fu_229_ap_ready);

assign grp_myproject_fu_229_ap_start = grp_myproject_fu_229_ap_start_reg;

assign i_fu_272_p2 = (i_0_reg_206 + 10'd1);

assign icmp_ln21_fu_266_p2 = ((i_0_reg_206 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_323_p2 = ((j3_0_reg_217 == 4'd10) ? 1'b1 : 1'b0);

assign in_V_address0 = zext_ln25_fu_278_p1;

assign io_acc_block_signal_op64 = (out_local_V_data_9_V_empty_n & out_local_V_data_8_V_empty_n & out_local_V_data_7_V_empty_n & out_local_V_data_6_V_empty_n & out_local_V_data_5_V_empty_n & out_local_V_data_4_V_empty_n & out_local_V_data_3_V_empty_n & out_local_V_data_2_V_empty_n & out_local_V_data_1_V_empty_n & out_local_V_data_0_V_empty_n);

assign j_fu_329_p2 = (j3_0_reg_217 + 4'd1);

assign out_V_address0 = zext_ln35_fu_351_p1;

assign zext_ln25_fu_278_p1 = i_0_reg_206;

assign zext_ln35_fu_351_p1 = j3_0_reg_217;

endmodule //myproject_axi
