-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_rom is 
    generic(
             DWIDTH     : integer := 156; 
             AWIDTH     : integer := 4; 
             MEM_SIZE    : integer := 16
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111000011011111111011000011011111110110011001111111011100101111111111000101100000001011011100000000011001010111111111111111100000001011010110000000000000010", 
    1 => "111110100001000000010011000111111111110011000000000011010100000001001010101100000001101100111111110100101101111111111001000100000000000000001111101101111110", 
    2 => "111010110010111110110101110111111110100010100000100000010111000000000111011100000000000000000000001000100001111111111111111111111111111111111111111111111111", 
    3 => "111111111111000000000000000011111111111111110000000000000000000000000000000000000000000000000000001001000111111111001101101011111011011100100000001011111101", 
    4 => "010100111010111111100101011111111001111001111111111011000101111111010011100100000000001100010000000000000000000000100011110100000000000000000000000101010010", 
    5 => "111100111010000000000000000000000110010011000000001010001000000000000000000000000001001010011111111111111111111111100111110011111111111111101111111110010000", 
    6 => "111001010110111111111111111111111101001100010000000000000000000000110101000111111110111101001111110101000110111111111111111100000101001111011111111101101100", 
    7 => "000000000000111111111111111100000000000000001111111110110100000000000000000011111101110110101111111111111111111111110100101100000000000000000000001010100101", 
    8 => "001010000101000000000101001000000010010100111111111110110011111111111111111111111100111000101111110110110011000000011110000011111110110011100000000011011001", 
    9 => "000101000100111111111111111000000011001001001111110110001111111111011010110000000001110010000000000000000000000000000110011111111010101010011111111111100010", 
    10 => "001110111010111111111111000000000011000100110000000111011001111111110100011111111111111111111111101111101110111111101010011111111101001010100000000100110100", 
    11 => "111111111111111111111111111100000000000110100000000000000000000000100001001011111011110010111111110001000101000000000001000011111101111000011111111111111111", 
    12 => "111111101100000001100011111111111110100101010000000000000000000000000001101111111101101110111111111011100010111111111111111100000000011000110000000000000000", 
    13 => "000100001000111111101011010100000000000101111111111000010101000000101101000111111111000010111111110011110001000000000000000011111101100000010000001100111100", 
    14 => "010100101101000000101111111011111011000101100000001010100100111111111001000011111001000111011111111111111111000000001110001000000000000000001111111101111100", 
    15 => "000100000010111111000100100011111111110011000000010100000001000000101111110100000000000000001111111001101110111111111111111011111101101110101111111111111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb is
    generic (
        DataWidth : INTEGER := 156;
        AddressRange : INTEGER := 16;
        AddressWidth : INTEGER := 4);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb is
    component dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_rom_U :  component dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


