-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_w8_V_rom is 
    generic(
             DWIDTH     : integer := 384; 
             AWIDTH     : integer := 4; 
             MEM_SIZE    : integer := 16
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_w8_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "110000011101000000000000000000000000001111000000110000000111000000001111000000000000000000000000000000000000000000000000000000000000000000010011000000000000000000000000000000000000000000000000111111000000010100000000000000000000100100010000000000000000010001000000000000000000001000000000001001000000000000000000000000000000000000000000010011000000000000000000000000000000000000000000", 
    1 => "001011111011000000000000000000000000000000000000010100000000000000000000000000000000000000000000000000000000000000000000111101000000000000000000000000000000000000000000000000000000111110000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000111110000000101101000000011111000000000000000000000000000000", 
    2 => "000000111111000000000000000000000000000011111100000000000000000000000000000000000000100001000000000000000000000000000000100001000000110101000000010000100000000001000000000000000000000111000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000010000000000000000010001000000000000000000000000000111000000000000000000111111000000000000000000000000000000", 
    3 => "000000000000000000000000000000011110000000110111000000000011000000011001000000000000000000011110000000000000000000000000000000011111111110000000011000000000000000000000000000000000000000111101000000000000000000000000000000000000000000000001000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000111101000000100110000000010011000000000000000000000000", 
    4 => "100100011100000000000000000000011101000000000000101101000000111101010110010011001010000000000000000000110010000000000000000000000000000000010110000100111101111101000000000000000000000000000000000000110100000000011011000000000000000000000000000000000000000100000000000000000000001000000000011111111101010100011111000000000000000000000000011100000000000000000000000000000000000000000000", 
    5 => "000000110111000000000000110100000000000000000001000000110110110000000000000000001011000000000000000000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111001000000011010000000000000110100000000000000000000000000000000000000000000000000010111000000000000000000011001000000000000000000000000000000000000000000000000000000000000000000000000", 
    6 => "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000011000000000000000000000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000010001000000000000000000000000", 
    7 => "111011001010000000000000000000110111000000000000111100000000000000000000000000000000000000000000000000000011000000000000000000111101000000000000101000000000000000000000000000000000000000000000000000000100000000000000000000000000111100000011000000000000000111000000000000000000000110100100000000000000000000000000000000000000000000000000011010000000100111000000000000000000000000000000", 
    8 => "111111000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000111000000000000000001000000000000000000000010011000000000000111001000000000000000000111110000000111000000000001001000000000000000000000000000000000000100110000000000000000000000100000000110001001100000000000000000000000000000000111110000000001010000000000000000000000000000000000000", 
    9 => "000000111001000000000000000000000000000000000000000000111111000000000000000000100110000000000000000000001000000000000000000000000000000000111000000000000000000000001011000000000000000000001010000000001000000000110100000000000000000000000000000000000000011110000001000000000000111111000000001110111000000000000000000000000000000000001010000000011111000000100000000000000000000000000000", 
    10 => "000000111111000000000000000000000000110111001110000000000000000000000000000000000000010010000000001001000000000000000000000000000000000000000000000000100000000000000000000000000000000000000001001010000000000000000000000000000000011111000000000000000000000000011111000000000000110101101101111101000101101100000000000000000000000000000000000000011111000000100000000000000000000000000000", 
    11 => "000000000000000000000000000000000000000000000000000000000000000000000000011111000000000000000000111110000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000001100000000000000000000000000000000000000000001000000011111000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000", 
    12 => "000000000000000000000000000000100100000001000000000000000000101010100000000000101110000000101100000000000000000000000000110001000000110110101011000000000000000000000000000000000000000011000000000000000000000000111010000000000000000000000000000000000000000000000000000000000000000000000000000000100100000000000000000000000000000011000000000000000000000000000000000000000000000000000000", 
    13 => "000000000000000000000000000000000000000000000000011111000000000000000000000000011111000000000101001000111101000000000000000000000000000000000000111111000010000001111111000000000000000000000000001010111101000000010010000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111101000000000000000001000000000000000000000000", 
    14 => "110111001000000000000000111010000000010000011110000000000000000000010000011110000000001010100100111110000000000000000000000000100000000000010100001011000100110111001000000000000000000000001001111110000000000001000000000000000000111100000000000000000000000011000000000000000000011011000000011100111101000100000010000000000000000000001001000011000000000000100011000000000000000000000000", 
    15 => "000000110111000000000000000000001110000000011010000000000000000000000000001100111110000000100010000000000011000000000000000000111101000000111111010000000000111101001010000000000000000000000101000000000000001110000000000000000000000000000000000000000000000000111110000000000000011001000000000000111010001111000000000000000000000000000100000000010010000000101000000000000000000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_w8_V is
    generic (
        DataWidth : INTEGER := 384;
        AddressRange : INTEGER := 16;
        AddressWidth : INTEGER := 4);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_w8_V is
    component dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_w8_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_w8_V_rom_U :  component dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config8_s_w8_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


