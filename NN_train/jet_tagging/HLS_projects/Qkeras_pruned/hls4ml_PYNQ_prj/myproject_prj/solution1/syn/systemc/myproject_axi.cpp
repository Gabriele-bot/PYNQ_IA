// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myproject_axi.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myproject_axi::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myproject_axi::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<24> myproject_axi::ap_ST_fsm_state1 = "1";
const sc_lv<24> myproject_axi::ap_ST_fsm_state2 = "10";
const sc_lv<24> myproject_axi::ap_ST_fsm_state3 = "100";
const sc_lv<24> myproject_axi::ap_ST_fsm_state4 = "1000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state5 = "10000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state6 = "100000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state7 = "1000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state8 = "10000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state9 = "100000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state10 = "1000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state11 = "10000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state12 = "100000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<24> myproject_axi::ap_ST_fsm_state24 = "100000000000000000000000";
const int myproject_axi::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> myproject_axi::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> myproject_axi::ap_const_lv32_1 = "1";
const sc_lv<32> myproject_axi::ap_const_lv32_2 = "10";
const sc_lv<32> myproject_axi::ap_const_lv32_3 = "11";
const sc_lv<32> myproject_axi::ap_const_lv32_4 = "100";
const sc_lv<32> myproject_axi::ap_const_lv32_5 = "101";
const sc_lv<32> myproject_axi::ap_const_lv32_6 = "110";
const sc_lv<32> myproject_axi::ap_const_lv32_7 = "111";
const sc_lv<32> myproject_axi::ap_const_lv32_8 = "1000";
const sc_lv<32> myproject_axi::ap_const_lv32_9 = "1001";
const sc_lv<32> myproject_axi::ap_const_lv32_A = "1010";
const sc_lv<32> myproject_axi::ap_const_lv32_B = "1011";
const sc_lv<32> myproject_axi::ap_const_lv32_C = "1100";
const sc_lv<32> myproject_axi::ap_const_lv32_D = "1101";
const sc_lv<32> myproject_axi::ap_const_lv32_E = "1110";
const sc_lv<32> myproject_axi::ap_const_lv32_F = "1111";
const sc_lv<32> myproject_axi::ap_const_lv32_11 = "10001";
const sc_lv<32> myproject_axi::ap_const_lv32_12 = "10010";
const bool myproject_axi::ap_const_boolean_0 = false;
const sc_lv<64> myproject_axi::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> myproject_axi::ap_const_lv64_1 = "1";
const sc_lv<64> myproject_axi::ap_const_lv64_2 = "10";
const sc_lv<64> myproject_axi::ap_const_lv64_3 = "11";
const sc_lv<64> myproject_axi::ap_const_lv64_4 = "100";
const sc_lv<64> myproject_axi::ap_const_lv64_5 = "101";
const sc_lv<64> myproject_axi::ap_const_lv64_6 = "110";
const sc_lv<64> myproject_axi::ap_const_lv64_7 = "111";
const sc_lv<64> myproject_axi::ap_const_lv64_8 = "1000";
const sc_lv<64> myproject_axi::ap_const_lv64_9 = "1001";
const sc_lv<64> myproject_axi::ap_const_lv64_A = "1010";
const sc_lv<64> myproject_axi::ap_const_lv64_B = "1011";
const sc_lv<64> myproject_axi::ap_const_lv64_C = "1100";
const sc_lv<64> myproject_axi::ap_const_lv64_D = "1101";
const sc_lv<64> myproject_axi::ap_const_lv64_E = "1110";
const sc_lv<64> myproject_axi::ap_const_lv64_F = "1111";
const sc_lv<32> myproject_axi::ap_const_lv32_13 = "10011";
const sc_lv<32> myproject_axi::ap_const_lv32_14 = "10100";
const sc_lv<32> myproject_axi::ap_const_lv32_15 = "10101";
const sc_lv<32> myproject_axi::ap_const_lv32_16 = "10110";
const sc_lv<32> myproject_axi::ap_const_lv32_17 = "10111";
const sc_lv<32> myproject_axi::ap_const_lv32_10 = "10000";
const bool myproject_axi::ap_const_boolean_1 = true;

myproject_axi::myproject_axi(sc_module_name name) : sc_module(name), mVcdFile(0) {
    myproject_axi_AXILiteS_s_axi_U = new myproject_axi_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("myproject_axi_AXILiteS_s_axi_U");
    myproject_axi_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    myproject_axi_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    myproject_axi_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    myproject_axi_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    myproject_axi_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    myproject_axi_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    myproject_axi_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    myproject_axi_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    myproject_axi_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    myproject_axi_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    myproject_axi_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    myproject_axi_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    myproject_axi_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    myproject_axi_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    myproject_axi_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    myproject_axi_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    myproject_axi_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    myproject_axi_AXILiteS_s_axi_U->ACLK(ap_clk);
    myproject_axi_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    myproject_axi_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    myproject_axi_AXILiteS_s_axi_U->in_V_address0(in_V_address0);
    myproject_axi_AXILiteS_s_axi_U->in_V_ce0(in_V_ce0);
    myproject_axi_AXILiteS_s_axi_U->in_V_q0(in_V_q0);
    myproject_axi_AXILiteS_s_axi_U->out_V_address0(out_V_address0);
    myproject_axi_AXILiteS_s_axi_U->out_V_ce0(out_V_ce0);
    myproject_axi_AXILiteS_s_axi_U->out_V_we0(out_V_we0);
    myproject_axi_AXILiteS_s_axi_U->out_V_d0(out_V_d0);
    grp_myproject_fu_299 = new myproject("grp_myproject_fu_299");
    grp_myproject_fu_299->fc1_input_V(in_local_V_fu_76);
    grp_myproject_fu_299->layer13_out_0_V(grp_myproject_fu_299_layer13_out_0_V);
    grp_myproject_fu_299->layer13_out_1_V(grp_myproject_fu_299_layer13_out_1_V);
    grp_myproject_fu_299->layer13_out_2_V(grp_myproject_fu_299_layer13_out_2_V);
    grp_myproject_fu_299->layer13_out_3_V(grp_myproject_fu_299_layer13_out_3_V);
    grp_myproject_fu_299->layer13_out_4_V(grp_myproject_fu_299_layer13_out_4_V);
    grp_myproject_fu_299->ap_clk(ap_clk);
    grp_myproject_fu_299->ap_rst(ap_rst_n_inv);
    grp_myproject_fu_299->fc1_input_V_ap_vld(ap_var_for_const0);
    grp_myproject_fu_299->ap_start(grp_myproject_fu_299_ap_start);
    grp_myproject_fu_299->layer13_out_0_V_ap_vld(grp_myproject_fu_299_layer13_out_0_V_ap_vld);
    grp_myproject_fu_299->layer13_out_1_V_ap_vld(grp_myproject_fu_299_layer13_out_1_V_ap_vld);
    grp_myproject_fu_299->layer13_out_2_V_ap_vld(grp_myproject_fu_299_layer13_out_2_V_ap_vld);
    grp_myproject_fu_299->layer13_out_3_V_ap_vld(grp_myproject_fu_299_layer13_out_3_V_ap_vld);
    grp_myproject_fu_299->layer13_out_4_V_ap_vld(grp_myproject_fu_299_layer13_out_4_V_ap_vld);
    grp_myproject_fu_299->ap_done(grp_myproject_fu_299_ap_done);
    grp_myproject_fu_299->ap_ready(grp_myproject_fu_299_ap_ready);
    grp_myproject_fu_299->ap_idle(grp_myproject_fu_299_ap_idle);
    grp_myproject_fu_299->ap_continue(grp_myproject_fu_299_ap_continue);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state19_on_subcall_done);
    sensitive << ( ap_sync_grp_myproject_fu_299_ap_ready );
    sensitive << ( ap_sync_grp_myproject_fu_299_ap_done );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_grp_myproject_fu_299_ap_done);
    sensitive << ( grp_myproject_fu_299_ap_done );
    sensitive << ( ap_sync_reg_grp_myproject_fu_299_ap_done );

    SC_METHOD(thread_ap_sync_grp_myproject_fu_299_ap_ready);
    sensitive << ( grp_myproject_fu_299_ap_ready );
    sensitive << ( ap_sync_reg_grp_myproject_fu_299_ap_ready );

    SC_METHOD(thread_grp_myproject_fu_299_ap_continue);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_block_state19_on_subcall_done );

    SC_METHOD(thread_grp_myproject_fu_299_ap_start);
    sensitive << ( grp_myproject_fu_299_ap_start_reg );

    SC_METHOD(thread_in_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_in_V_ce0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_in_local_V_1_fu_321_p17);
    sensitive << ( in_V_q0 );
    sensitive << ( in_V_load_reg_408 );
    sensitive << ( in_V_load_1_reg_418 );
    sensitive << ( in_V_load_2_reg_428 );
    sensitive << ( in_V_load_3_reg_438 );
    sensitive << ( in_V_load_4_reg_448 );
    sensitive << ( in_V_load_5_reg_458 );
    sensitive << ( in_V_load_6_reg_468 );
    sensitive << ( in_V_load_7_reg_478 );
    sensitive << ( in_V_load_8_reg_488 );
    sensitive << ( in_V_load_9_reg_498 );
    sensitive << ( in_V_load_10_reg_508 );
    sensitive << ( in_V_load_11_reg_518 );
    sensitive << ( in_V_load_12_reg_528 );
    sensitive << ( in_V_load_13_reg_538 );
    sensitive << ( in_V_load_14_reg_548 );

    SC_METHOD(thread_out_V_address0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_out_V_ce0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_out_V_d0);
    sensitive << ( out_local_0_fu_80 );
    sensitive << ( out_local_1_fu_84 );
    sensitive << ( out_local_2_fu_88 );
    sensitive << ( out_local_3_fu_92 );
    sensitive << ( out_local_4_fu_96 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_out_V_we0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_block_state19_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000001";
    grp_myproject_fu_299_ap_start_reg = SC_LOGIC_0;
    ap_sync_reg_grp_myproject_fu_299_ap_ready = SC_LOGIC_0;
    ap_sync_reg_grp_myproject_fu_299_ap_done = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myproject_axi_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, in_V_address0, "in_V_address0");
    sc_trace(mVcdFile, in_V_ce0, "in_V_ce0");
    sc_trace(mVcdFile, in_V_q0, "in_V_q0");
    sc_trace(mVcdFile, out_V_address0, "out_V_address0");
    sc_trace(mVcdFile, out_V_ce0, "out_V_ce0");
    sc_trace(mVcdFile, out_V_we0, "out_V_we0");
    sc_trace(mVcdFile, out_V_d0, "out_V_d0");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_load_reg_408, "in_V_load_reg_408");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, in_V_load_1_reg_418, "in_V_load_1_reg_418");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, in_V_load_2_reg_428, "in_V_load_2_reg_428");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, in_V_load_3_reg_438, "in_V_load_3_reg_438");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, in_V_load_4_reg_448, "in_V_load_4_reg_448");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, in_V_load_5_reg_458, "in_V_load_5_reg_458");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, in_V_load_6_reg_468, "in_V_load_6_reg_468");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, in_V_load_7_reg_478, "in_V_load_7_reg_478");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, in_V_load_8_reg_488, "in_V_load_8_reg_488");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, in_V_load_9_reg_498, "in_V_load_9_reg_498");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, in_V_load_10_reg_508, "in_V_load_10_reg_508");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, in_V_load_11_reg_518, "in_V_load_11_reg_518");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, in_V_load_12_reg_528, "in_V_load_12_reg_528");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, in_V_load_13_reg_538, "in_V_load_13_reg_538");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, in_V_load_14_reg_548, "in_V_load_14_reg_548");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_0_V, "grp_myproject_fu_299_layer13_out_0_V");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_1_V, "grp_myproject_fu_299_layer13_out_1_V");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_2_V, "grp_myproject_fu_299_layer13_out_2_V");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_3_V, "grp_myproject_fu_299_layer13_out_3_V");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_4_V, "grp_myproject_fu_299_layer13_out_4_V");
    sc_trace(mVcdFile, grp_myproject_fu_299_ap_start, "grp_myproject_fu_299_ap_start");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_0_V_ap_vld, "grp_myproject_fu_299_layer13_out_0_V_ap_vld");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_1_V_ap_vld, "grp_myproject_fu_299_layer13_out_1_V_ap_vld");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_2_V_ap_vld, "grp_myproject_fu_299_layer13_out_2_V_ap_vld");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_3_V_ap_vld, "grp_myproject_fu_299_layer13_out_3_V_ap_vld");
    sc_trace(mVcdFile, grp_myproject_fu_299_layer13_out_4_V_ap_vld, "grp_myproject_fu_299_layer13_out_4_V_ap_vld");
    sc_trace(mVcdFile, grp_myproject_fu_299_ap_done, "grp_myproject_fu_299_ap_done");
    sc_trace(mVcdFile, grp_myproject_fu_299_ap_ready, "grp_myproject_fu_299_ap_ready");
    sc_trace(mVcdFile, grp_myproject_fu_299_ap_idle, "grp_myproject_fu_299_ap_idle");
    sc_trace(mVcdFile, grp_myproject_fu_299_ap_continue, "grp_myproject_fu_299_ap_continue");
    sc_trace(mVcdFile, grp_myproject_fu_299_ap_start_reg, "grp_myproject_fu_299_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_sync_grp_myproject_fu_299_ap_ready, "ap_sync_grp_myproject_fu_299_ap_ready");
    sc_trace(mVcdFile, ap_sync_grp_myproject_fu_299_ap_done, "ap_sync_grp_myproject_fu_299_ap_done");
    sc_trace(mVcdFile, ap_block_state19_on_subcall_done, "ap_block_state19_on_subcall_done");
    sc_trace(mVcdFile, ap_sync_reg_grp_myproject_fu_299_ap_ready, "ap_sync_reg_grp_myproject_fu_299_ap_ready");
    sc_trace(mVcdFile, ap_sync_reg_grp_myproject_fu_299_ap_done, "ap_sync_reg_grp_myproject_fu_299_ap_done");
    sc_trace(mVcdFile, in_local_V_fu_76, "in_local_V_fu_76");
    sc_trace(mVcdFile, out_local_0_fu_80, "out_local_0_fu_80");
    sc_trace(mVcdFile, out_local_1_fu_84, "out_local_1_fu_84");
    sc_trace(mVcdFile, out_local_2_fu_88, "out_local_2_fu_88");
    sc_trace(mVcdFile, out_local_3_fu_92, "out_local_3_fu_92");
    sc_trace(mVcdFile, out_local_4_fu_96, "out_local_4_fu_96");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, in_local_V_1_fu_321_p17, "in_local_V_1_fu_321_p17");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("myproject_axi.hdltvin.dat");
    mHdltvoutHandle.open("myproject_axi.hdltvout.dat");
}

myproject_axi::~myproject_axi() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete myproject_axi_AXILiteS_s_axi_U;
    delete grp_myproject_fu_299;
}

void myproject_axi::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void myproject_axi::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_myproject_fu_299_ap_done = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
             esl_seteq<1,1,1>(ap_block_state19_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_myproject_fu_299_ap_done = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_299_ap_done.read())) {
            ap_sync_reg_grp_myproject_fu_299_ap_done = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_grp_myproject_fu_299_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
             esl_seteq<1,1,1>(ap_block_state19_on_subcall_done.read(), ap_const_boolean_0))) {
            ap_sync_reg_grp_myproject_fu_299_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_299_ap_ready.read())) {
            ap_sync_reg_grp_myproject_fu_299_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        grp_myproject_fu_299_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_grp_myproject_fu_299_ap_ready.read())))) {
            grp_myproject_fu_299_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_299_ap_ready.read())) {
            grp_myproject_fu_299_ap_start_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        in_V_load_10_reg_508 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        in_V_load_11_reg_518 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        in_V_load_12_reg_528 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        in_V_load_13_reg_538 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        in_V_load_14_reg_548 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_V_load_1_reg_418 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_V_load_2_reg_428 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        in_V_load_3_reg_438 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        in_V_load_4_reg_448 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        in_V_load_5_reg_458 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        in_V_load_6_reg_468 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        in_V_load_7_reg_478 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        in_V_load_8_reg_488 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        in_V_load_9_reg_498 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_V_load_reg_408 = in_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        in_local_V_fu_76 = in_local_V_1_fu_321_p17.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_299_layer13_out_0_V_ap_vld.read()))) {
        out_local_0_fu_80 = grp_myproject_fu_299_layer13_out_0_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_299_layer13_out_1_V_ap_vld.read()))) {
        out_local_1_fu_84 = grp_myproject_fu_299_layer13_out_1_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_299_layer13_out_2_V_ap_vld.read()))) {
        out_local_2_fu_88 = grp_myproject_fu_299_layer13_out_2_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_299_layer13_out_3_V_ap_vld.read()))) {
        out_local_3_fu_92 = grp_myproject_fu_299_layer13_out_3_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_const_logic_1, grp_myproject_fu_299_layer13_out_4_V_ap_vld.read()))) {
        out_local_4_fu_96 = grp_myproject_fu_299_layer13_out_4_V.read();
    }
}

void myproject_axi::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void myproject_axi::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void myproject_axi::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void myproject_axi::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void myproject_axi::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void myproject_axi::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void myproject_axi::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void myproject_axi::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void myproject_axi::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void myproject_axi::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void myproject_axi::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void myproject_axi::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void myproject_axi::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void myproject_axi::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void myproject_axi::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void myproject_axi::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void myproject_axi::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void myproject_axi::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void myproject_axi::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void myproject_axi::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void myproject_axi::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void myproject_axi::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void myproject_axi::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void myproject_axi::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void myproject_axi::thread_ap_block_state19_on_subcall_done() {
    ap_block_state19_on_subcall_done = esl_seteq<1,1,1>(ap_const_logic_0, (ap_sync_grp_myproject_fu_299_ap_ready.read() & ap_sync_grp_myproject_fu_299_ap_done.read()));
}

void myproject_axi::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void myproject_axi::thread_ap_sync_grp_myproject_fu_299_ap_done() {
    ap_sync_grp_myproject_fu_299_ap_done = (grp_myproject_fu_299_ap_done.read() | ap_sync_reg_grp_myproject_fu_299_ap_done.read());
}

void myproject_axi::thread_ap_sync_grp_myproject_fu_299_ap_ready() {
    ap_sync_grp_myproject_fu_299_ap_ready = (grp_myproject_fu_299_ap_ready.read() | ap_sync_reg_grp_myproject_fu_299_ap_ready.read());
}

void myproject_axi::thread_grp_myproject_fu_299_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         esl_seteq<1,1,1>(ap_block_state19_on_subcall_done.read(), ap_const_boolean_0))) {
        grp_myproject_fu_299_ap_continue = ap_const_logic_1;
    } else {
        grp_myproject_fu_299_ap_continue = ap_const_logic_0;
    }
}

void myproject_axi::thread_grp_myproject_fu_299_ap_start() {
    grp_myproject_fu_299_ap_start = grp_myproject_fu_299_ap_start_reg.read();
}

void myproject_axi::thread_in_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        in_V_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        in_V_address0 = "XXXX";
    }
}

void myproject_axi::thread_in_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        in_V_ce0 = ap_const_logic_1;
    } else {
        in_V_ce0 = ap_const_logic_0;
    }
}

void myproject_axi::thread_in_local_V_1_fu_321_p17() {
    in_local_V_1_fu_321_p17 = esl_concat<240,16>(esl_concat<224,16>(esl_concat<208,16>(esl_concat<192,16>(esl_concat<176,16>(esl_concat<160,16>(esl_concat<144,16>(esl_concat<128,16>(esl_concat<112,16>(esl_concat<96,16>(esl_concat<80,16>(esl_concat<64,16>(esl_concat<48,16>(esl_concat<32,16>(esl_concat<16,16>(in_V_q0.read(), in_V_load_14_reg_548.read()), in_V_load_13_reg_538.read()), in_V_load_12_reg_528.read()), in_V_load_11_reg_518.read()), in_V_load_10_reg_508.read()), in_V_load_9_reg_498.read()), in_V_load_8_reg_488.read()), in_V_load_7_reg_478.read()), in_V_load_6_reg_468.read()), in_V_load_5_reg_458.read()), in_V_load_4_reg_448.read()), in_V_load_3_reg_438.read()), in_V_load_2_reg_428.read()), in_V_load_1_reg_418.read()), in_V_load_reg_408.read());
}

void myproject_axi::thread_out_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        out_V_address0 =  (sc_lv<3>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        out_V_address0 =  (sc_lv<3>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        out_V_address0 =  (sc_lv<3>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        out_V_address0 =  (sc_lv<3>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        out_V_address0 =  (sc_lv<3>) (ap_const_lv64_0);
    } else {
        out_V_address0 =  (sc_lv<3>) ("XXX");
    }
}

void myproject_axi::thread_out_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        out_V_ce0 = ap_const_logic_1;
    } else {
        out_V_ce0 = ap_const_logic_0;
    }
}

void myproject_axi::thread_out_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        out_V_d0 = out_local_4_fu_96.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        out_V_d0 = out_local_3_fu_92.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        out_V_d0 = out_local_2_fu_88.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        out_V_d0 = out_local_1_fu_84.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        out_V_d0 = out_local_0_fu_80.read();
    } else {
        out_V_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void myproject_axi::thread_out_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        out_V_we0 = ap_const_logic_1;
    } else {
        out_V_we0 = ap_const_logic_0;
    }
}

void myproject_axi::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_block_state19_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<24>) ("XXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void myproject_axi::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

