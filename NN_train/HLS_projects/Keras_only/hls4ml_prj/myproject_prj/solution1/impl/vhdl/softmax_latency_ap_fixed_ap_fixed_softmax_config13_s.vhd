-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_latency_ap_fixed_ap_fixed_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of softmax_latency_ap_fixed_ap_fixed_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_4_reg_631 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_631_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_636 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_636_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_636_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_636_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_636_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_636_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_642 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_642_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_642_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_642_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_642_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_642_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_648 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_648_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_648_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_648_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_648_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_648_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_654 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_654_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_654_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_654_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_654_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_654_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_7_fu_268_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_7_reg_665 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_fu_290_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_8_reg_671 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_677 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_677_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_677_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_677_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_11_fu_376_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_11_reg_684 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_5_fu_476_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_reg_690 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_700 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_488_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_581_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_reg_739 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_587_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_reg_744 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_593_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_reg_749 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_3_reg_754 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_605_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_reg_759 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln251_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_1_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_2_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_3_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_4_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_fu_168_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_183_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_198_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_213_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_2_fu_241_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_fu_238_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_3_fu_254_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_260_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_247_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_4_fu_244_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_6_fu_276_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_282_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_298_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_fu_301_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_304_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_10_fu_318_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_16_fu_322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_15_fu_310_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_360_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln388_fu_368_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_1_fu_387_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_390_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_393_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln203_4_fu_384_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_14_fu_407_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_18_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_399_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_450_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_1_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_460_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_468_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_581_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_581_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_587_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_587_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_593_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_593_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_599_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_599_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_605_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_605_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_581_ce : STD_LOGIC;
    signal grp_fu_587_ce : STD_LOGIC;
    signal grp_fu_593_ce : STD_LOGIC;
    signal grp_fu_599_ce : STD_LOGIC;
    signal grp_fu_605_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_581_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_587_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_593_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_599_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_605_p00 : STD_LOGIC_VECTOR (25 downto 0);

    component myproject_mul_mul_17ns_18s_26_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_exp_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_exp_bkb
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4);

    invert_table2_U : component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_17ns_18s_26_3_1_U404 : component myproject_mul_mul_17ns_18s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_581_p0,
        din1 => grp_fu_581_p1,
        ce => grp_fu_581_ce,
        dout => grp_fu_581_p2);

    myproject_mul_mul_17ns_18s_26_3_1_U405 : component myproject_mul_mul_17ns_18s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_587_p0,
        din1 => grp_fu_587_p1,
        ce => grp_fu_587_ce,
        dout => grp_fu_587_p2);

    myproject_mul_mul_17ns_18s_26_3_1_U406 : component myproject_mul_mul_17ns_18s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_593_p0,
        din1 => grp_fu_593_p1,
        ce => grp_fu_593_ce,
        dout => grp_fu_593_p2);

    myproject_mul_mul_17ns_18s_26_3_1_U407 : component myproject_mul_mul_17ns_18s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_599_p0,
        din1 => grp_fu_599_p1,
        ce => grp_fu_599_ce,
        dout => grp_fu_599_p2);

    myproject_mul_mul_17ns_18s_26_3_1_U408 : component myproject_mul_mul_17ns_18s_26_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_605_p0,
        din1 => grp_fu_605_p1,
        ce => grp_fu_605_ce,
        dout => grp_fu_605_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_res_0_V_reg_636 <= exp_table1_q0;
                exp_res_1_V_reg_642 <= exp_table1_q1;
                exp_res_2_V_reg_648 <= exp_table1_q2;
                exp_res_3_V_reg_654 <= exp_table1_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_res_0_V_reg_636_pp0_iter2_reg <= exp_res_0_V_reg_636;
                exp_res_0_V_reg_636_pp0_iter3_reg <= exp_res_0_V_reg_636_pp0_iter2_reg;
                exp_res_0_V_reg_636_pp0_iter4_reg <= exp_res_0_V_reg_636_pp0_iter3_reg;
                exp_res_0_V_reg_636_pp0_iter5_reg <= exp_res_0_V_reg_636_pp0_iter4_reg;
                exp_res_0_V_reg_636_pp0_iter6_reg <= exp_res_0_V_reg_636_pp0_iter5_reg;
                exp_res_1_V_reg_642_pp0_iter2_reg <= exp_res_1_V_reg_642;
                exp_res_1_V_reg_642_pp0_iter3_reg <= exp_res_1_V_reg_642_pp0_iter2_reg;
                exp_res_1_V_reg_642_pp0_iter4_reg <= exp_res_1_V_reg_642_pp0_iter3_reg;
                exp_res_1_V_reg_642_pp0_iter5_reg <= exp_res_1_V_reg_642_pp0_iter4_reg;
                exp_res_1_V_reg_642_pp0_iter6_reg <= exp_res_1_V_reg_642_pp0_iter5_reg;
                exp_res_2_V_reg_648_pp0_iter2_reg <= exp_res_2_V_reg_648;
                exp_res_2_V_reg_648_pp0_iter3_reg <= exp_res_2_V_reg_648_pp0_iter2_reg;
                exp_res_2_V_reg_648_pp0_iter4_reg <= exp_res_2_V_reg_648_pp0_iter3_reg;
                exp_res_2_V_reg_648_pp0_iter5_reg <= exp_res_2_V_reg_648_pp0_iter4_reg;
                exp_res_2_V_reg_648_pp0_iter6_reg <= exp_res_2_V_reg_648_pp0_iter5_reg;
                exp_res_3_V_reg_654_pp0_iter2_reg <= exp_res_3_V_reg_654;
                exp_res_3_V_reg_654_pp0_iter3_reg <= exp_res_3_V_reg_654_pp0_iter2_reg;
                exp_res_3_V_reg_654_pp0_iter4_reg <= exp_res_3_V_reg_654_pp0_iter3_reg;
                exp_res_3_V_reg_654_pp0_iter5_reg <= exp_res_3_V_reg_654_pp0_iter4_reg;
                exp_res_3_V_reg_654_pp0_iter6_reg <= exp_res_3_V_reg_654_pp0_iter5_reg;
                exp_res_4_V_reg_677_pp0_iter4_reg <= exp_res_4_V_reg_677;
                exp_res_4_V_reg_677_pp0_iter5_reg <= exp_res_4_V_reg_677_pp0_iter4_reg;
                exp_res_4_V_reg_677_pp0_iter6_reg <= exp_res_4_V_reg_677_pp0_iter5_reg;
                inv_exp_sum_V_reg_700 <= invert_table2_q0;
                mul_ln1118_1_reg_744 <= grp_fu_587_p2;
                mul_ln1118_2_reg_749 <= grp_fu_593_p2;
                mul_ln1118_3_reg_754 <= grp_fu_599_p2;
                mul_ln1118_4_reg_759 <= grp_fu_605_p2;
                mul_ln1118_reg_739 <= grp_fu_581_p2;
                p_Val2_11_reg_684 <= p_Val2_11_fu_376_p3;
                p_Val2_7_reg_665 <= p_Val2_7_fu_268_p3;
                p_Val2_8_reg_671 <= p_Val2_8_fu_290_p3;
                y_V_5_reg_690 <= y_V_5_fu_476_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                exp_res_4_V_reg_677 <= exp_table1_q4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                y_V_4_reg_631 <= data_4_V_read(15 downto 6);
                y_V_4_reg_631_pp0_iter1_reg <= y_V_4_reg_631;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln1118_reg_739(25 downto 10);
    ap_return_1 <= mul_ln1118_1_reg_744(25 downto 10);
    ap_return_2 <= mul_ln1118_2_reg_749(25 downto 10);
    ap_return_3 <= mul_ln1118_3_reg_754(25 downto 10);
    ap_return_4 <= mul_ln1118_4_reg_759(25 downto 10);
    exp_table1_address0 <= zext_ln251_fu_178_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln251_1_fu_193_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln251_2_fu_208_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln251_3_fu_223_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln251_4_fu_250_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_581_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_581_ce <= ap_const_logic_1;
        else 
            grp_fu_581_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_581_p0 <= grp_fu_581_p00(17 - 1 downto 0);
    grp_fu_581_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_636_pp0_iter6_reg),26));
    grp_fu_581_p1 <= sext_ln1116_fu_488_p1(18 - 1 downto 0);

    grp_fu_587_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_587_ce <= ap_const_logic_1;
        else 
            grp_fu_587_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_587_p0 <= grp_fu_587_p00(17 - 1 downto 0);
    grp_fu_587_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_642_pp0_iter6_reg),26));
    grp_fu_587_p1 <= sext_ln1116_fu_488_p1(18 - 1 downto 0);

    grp_fu_593_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_593_ce <= ap_const_logic_1;
        else 
            grp_fu_593_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_593_p0 <= grp_fu_593_p00(17 - 1 downto 0);
    grp_fu_593_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_648_pp0_iter6_reg),26));
    grp_fu_593_p1 <= sext_ln1116_fu_488_p1(18 - 1 downto 0);

    grp_fu_599_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_599_ce <= ap_const_logic_1;
        else 
            grp_fu_599_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_599_p0 <= grp_fu_599_p00(17 - 1 downto 0);
    grp_fu_599_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_654_pp0_iter6_reg),26));
    grp_fu_599_p1 <= sext_ln1116_fu_488_p1(18 - 1 downto 0);

    grp_fu_605_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_605_ce <= ap_const_logic_1;
        else 
            grp_fu_605_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_605_p0 <= grp_fu_605_p00(17 - 1 downto 0);
    grp_fu_605_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_677_pp0_iter6_reg),26));
    grp_fu_605_p1 <= sext_ln1116_fu_488_p1(18 - 1 downto 0);
    invert_table2_address0 <= zext_ln259_fu_484_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_684),19));

        lhs_V_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_665),19));

    or_ln340_1_fu_444_p2 <= (xor_ln340_3_fu_438_p2 or p_Result_18_fu_412_p3);
    or_ln340_fu_354_p2 <= (xor_ln340_1_fu_348_p2 or p_Result_16_fu_322_p3);
    p_Result_14_fu_282_p3 <= p_Val2_6_fu_276_p2(17 downto 17);
    p_Result_15_fu_310_p3 <= ret_V_fu_304_p2(18 downto 18);
    p_Result_16_fu_322_p3 <= p_Val2_10_fu_318_p2(17 downto 17);
    p_Result_17_fu_399_p3 <= ret_V_1_fu_393_p2(18 downto 18);
    p_Result_18_fu_412_p3 <= p_Val2_14_fu_407_p2(17 downto 17);
    p_Result_s_fu_260_p3 <= p_Val2_3_fu_254_p2(17 downto 17);
    p_Val2_10_fu_318_p2 <= std_logic_vector(signed(p_Val2_8_reg_671) + signed(p_Val2_7_reg_665));
    p_Val2_11_fu_376_p3 <= 
        select_ln340_fu_360_p3 when (or_ln340_fu_354_p2(0) = '1') else 
        select_ln388_fu_368_p3;
    p_Val2_14_fu_407_p2 <= std_logic_vector(signed(p_Val2_11_reg_684) + signed(zext_ln203_4_fu_384_p1));
    p_Val2_2_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_642),18));
    p_Val2_3_fu_254_p2 <= std_logic_vector(unsigned(p_Val2_2_fu_241_p1) + unsigned(p_Val2_s_fu_238_p1));
    p_Val2_4_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_648),18));
    p_Val2_5_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_654),18));
    p_Val2_6_fu_276_p2 <= std_logic_vector(unsigned(p_Val2_5_fu_247_p1) + unsigned(p_Val2_4_fu_244_p1));
    p_Val2_7_fu_268_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_s_fu_260_p3(0) = '1') else 
        p_Val2_3_fu_254_p2;
    p_Val2_8_fu_290_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_14_fu_282_p3(0) = '1') else 
        p_Val2_6_fu_276_p2;
    p_Val2_s_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_636),18));
    ret_V_1_fu_393_p2 <= std_logic_vector(signed(lhs_V_1_fu_387_p1) + signed(rhs_V_1_fu_390_p1));
    ret_V_fu_304_p2 <= std_logic_vector(signed(lhs_V_fu_298_p1) + signed(rhs_V_fu_301_p1));
    rhs_V_1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_677),19));
        rhs_V_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_reg_671),19));

    select_ln340_3_fu_460_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_2_fu_432_p2(0) = '1') else 
        tmp_fu_450_p4;
    select_ln340_fu_360_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln340_fu_342_p2(0) = '1') else 
        p_Val2_10_fu_318_p2;
    select_ln388_1_fu_468_p3 <= 
        ap_const_lv10_200 when (underflow_1_fu_426_p2(0) = '1') else 
        tmp_fu_450_p4;
    select_ln388_fu_368_p3 <= 
        ap_const_lv18_20000 when (underflow_fu_336_p2(0) = '1') else 
        p_Val2_10_fu_318_p2;
        sext_ln1116_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_700),26));

    tmp_fu_450_p4 <= p_Val2_14_fu_407_p2(17 downto 8);
    underflow_1_fu_426_p2 <= (xor_ln786_1_fu_420_p2 and p_Result_17_fu_399_p3);
    underflow_fu_336_p2 <= (xor_ln786_fu_330_p2 and p_Result_15_fu_310_p3);
    xor_ln340_1_fu_348_p2 <= (p_Result_15_fu_310_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_432_p2 <= (p_Result_18_fu_412_p3 xor p_Result_17_fu_399_p3);
    xor_ln340_3_fu_438_p2 <= (p_Result_17_fu_399_p3 xor ap_const_lv1_1);
    xor_ln340_fu_342_p2 <= (p_Result_16_fu_322_p3 xor p_Result_15_fu_310_p3);
    xor_ln786_1_fu_420_p2 <= (p_Result_18_fu_412_p3 xor ap_const_lv1_1);
    xor_ln786_fu_330_p2 <= (p_Result_16_fu_322_p3 xor ap_const_lv1_1);
    y_V_1_fu_183_p4 <= data_1_V_read(15 downto 6);
    y_V_2_fu_198_p4 <= data_2_V_read(15 downto 6);
    y_V_3_fu_213_p4 <= data_3_V_read(15 downto 6);
    y_V_5_fu_476_p3 <= 
        select_ln340_3_fu_460_p3 when (or_ln340_1_fu_444_p2(0) = '1') else 
        select_ln388_1_fu_468_p3;
    y_V_fu_168_p4 <= data_0_V_read(15 downto 6);
    zext_ln203_4_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_677),18));
    zext_ln251_1_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_fu_183_p4),64));
    zext_ln251_2_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_198_p4),64));
    zext_ln251_3_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_213_p4),64));
    zext_ln251_4_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_631_pp0_iter1_reg),64));
    zext_ln251_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_168_p4),64));
    zext_ln259_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_reg_690),64));
end behav;
