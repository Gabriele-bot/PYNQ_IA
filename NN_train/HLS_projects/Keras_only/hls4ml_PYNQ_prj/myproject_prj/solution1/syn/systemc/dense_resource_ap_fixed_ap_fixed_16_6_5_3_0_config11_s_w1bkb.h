// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_H__
#define __dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 156;
  static const unsigned AddressRange = 16;
  static const unsigned AddressWidth = 4;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_ram) {
        ram[0] = "0b111000011011111111011000011011111110110011001111111011100101111111111000101100000001011011100000000011001010111111111111111100000001011010110000000000000010";
        ram[1] = "0b111110100001000000010011000111111111110011000000000011010100000001001010101100000001101100111111110100101101111111111001000100000000000000001111101101111110";
        ram[2] = "0b111010110010111110110101110111111110100010100000100000010111000000000111011100000000000000000000001000100001111111111111111111111111111111111111111111111111";
        ram[3] = "0b111111111111000000000000000011111111111111110000000000000000000000000000000000000000000000000000001001000111111111001101101011111011011100100000001011111101";
        ram[4] = "0b010100111010111111100101011111111001111001111111111011000101111111010011100100000000001100010000000000000000000000100011110100000000000000000000000101010010";
        ram[5] = "0b111100111010000000000000000000000110010011000000001010001000000000000000000000000001001010011111111111111111111111100111110011111111111111101111111110010000";
        ram[6] = "0b111001010110111111111111111111111101001100010000000000000000000000110101000111111110111101001111110101000110111111111111111100000101001111011111111101101100";
        ram[7] = "0b000000000000111111111111111100000000000000001111111110110100000000000000000011111101110110101111111111111111111111110100101100000000000000000000001010100101";
        ram[8] = "0b001010000101000000000101001000000010010100111111111110110011111111111111111111111100111000101111110110110011000000011110000011111110110011100000000011011001";
        ram[9] = "0b000101000100111111111111111000000011001001001111110110001111111111011010110000000001110010000000000000000000000000000110011111111010101010011111111111100010";
        ram[10] = "0b001110111010111111111111000000000011000100110000000111011001111111110100011111111111111111111111101111101110111111101010011111111101001010100000000100110100";
        ram[11] = "0b111111111111111111111111111100000000000110100000000000000000000000100001001011111011110010111111110001000101000000000001000011111101111000011111111111111111";
        ram[12] = "0b111111101100000001100011111111111110100101010000000000000000000000000001101111111101101110111111111011100010111111111111111100000000011000110000000000000000";
        ram[13] = "0b000100001000111111101011010100000000000101111111111000010101000000101101000111111111000010111111110011110001000000000000000011111101100000010000001100111100";
        ram[14] = "0b010100101101000000101111111011111011000101100000001010100100111111111001000011111001000111011111111111111111000000001110001000000000000000001111111101111100";
        ram[15] = "0b000100000010111111000100100011111111110011000000010100000001000000101111110100000000000000001111111001101110111111111111111011111101101110101111111111111111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb) {


static const unsigned DataWidth = 156;
static const unsigned AddressRange = 16;
static const unsigned AddressWidth = 4;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_ram* meminst;


SC_CTOR(dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb) {
meminst = new dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_ram("dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dense_resource_ap_fixed_ap_fixed_16_6_5_3_0_config11_s_w1bkb() {
    delete meminst;
}


};//endmodule
#endif
