-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_stable_ap_fixed_ap_fixed_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax_stable_ap_fixed_ap_fixed_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_4_V_read_1_reg_848 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_read_1_reg_848_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_4_V_read_1_reg_848_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_855 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_855_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_read_1_reg_855_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_861 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_861_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_read_1_reg_861_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_867 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_867_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_read_1_reg_867_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_873 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_873_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_read_1_reg_873_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_1_reg_884 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_2_fu_233_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln85_2_reg_889 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_fu_245_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_max_V_reg_895 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_fu_555_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_reg_900 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_589_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_905 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_623_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_910 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_657_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_915 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_915_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_691_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_reg_920 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_0_V_reg_945 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_0_V_reg_945_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_0_V_reg_945_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_0_V_reg_945_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_0_V_reg_945_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_V_reg_951 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_V_reg_951_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_V_reg_951_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_V_reg_951_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_V_reg_951_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_V_reg_957 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_V_reg_957_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_V_reg_957_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_V_reg_957_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_V_reg_957_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_968 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_968_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_968_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_968_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_968_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_3_V_reg_974 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_3_V_reg_974_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_3_V_reg_974_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_3_V_reg_974_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_719_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_reg_980 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_723_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_reg_985 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_5_reg_990 : STD_LOGIC_VECTOR (9 downto 0);
    signal inv_exp_sum_V_reg_1000 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_830_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_2_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_836_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_3_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_4_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln306_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln306_1_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_2_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_4_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln306_3_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln314_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1496_fu_205_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_fu_205_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_211_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_1_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln85_fu_217_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln85_1_fu_222_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1496_2_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_3_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_fu_251_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_254_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_257_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_2_fu_309_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_1_fu_312_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_3_fu_364_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_2_fu_367_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_4_fu_419_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_3_fu_422_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_12_fu_436_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln703_5_fu_474_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_4_fu_477_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_483_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_4_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_529_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_539_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_547_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_6_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_563_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_573_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_581_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_7_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_597_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_2_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_607_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_615_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_8_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_631_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_3_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_641_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_3_fu_649_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln340_9_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_665_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln786_4_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_675_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_4_fu_683_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_2_fu_727_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_V_fu_731_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_818_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_824_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_830_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_836_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_842_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_818_ce : STD_LOGIC;
    signal grp_fu_824_ce : STD_LOGIC;
    signal grp_fu_830_ce : STD_LOGIC;
    signal grp_fu_836_ce : STD_LOGIC;
    signal grp_fu_842_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_axi_mul_mul_18s_18s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_softmax_config13_s_exp_tcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component softmax_stable_ap_fixed_ap_fixed_softmax_config13_s_inverdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_stable_ap_fixed_ap_fixed_softmax_config13_s_exp_tcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4);

    invert_table2_U : component softmax_stable_ap_fixed_ap_fixed_softmax_config13_s_inverdEe
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_axi_mul_mul_18s_18s_32_3_1_U679 : component myproject_axi_mul_mul_18s_18s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_0_V_reg_945_pp0_iter9_reg,
        din1 => grp_fu_818_p1,
        ce => grp_fu_818_ce,
        dout => grp_fu_818_p2);

    myproject_axi_mul_mul_18s_18s_32_3_1_U680 : component myproject_axi_mul_mul_18s_18s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_1_V_reg_951_pp0_iter9_reg,
        din1 => grp_fu_824_p1,
        ce => grp_fu_824_ce,
        dout => grp_fu_824_p2);

    myproject_axi_mul_mul_18s_18s_32_3_1_U681 : component myproject_axi_mul_mul_18s_18s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_2_V_reg_957_pp0_iter9_reg,
        din1 => grp_fu_830_p1,
        ce => grp_fu_830_ce,
        dout => grp_fu_830_p2);

    myproject_axi_mul_mul_18s_18s_32_3_1_U682 : component myproject_axi_mul_mul_18s_18s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_3_V_reg_974_pp0_iter9_reg,
        din1 => grp_fu_836_p1,
        ce => grp_fu_836_ce,
        dout => grp_fu_836_p2);

    myproject_axi_mul_mul_18s_18s_32_3_1_U683 : component myproject_axi_mul_mul_18s_18s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => exp_res_4_V_reg_968_pp0_iter9_reg,
        din1 => grp_fu_842_p1,
        ce => grp_fu_842_ce,
        dout => grp_fu_842_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln703_1_reg_985 <= add_ln703_1_fu_723_p2;
                add_ln703_reg_980 <= add_ln703_fu_719_p2;
                data_0_V_read_1_reg_873_pp0_iter2_reg <= data_0_V_read_1_reg_873_pp0_iter1_reg;
                data_1_V_read_1_reg_867_pp0_iter2_reg <= data_1_V_read_1_reg_867_pp0_iter1_reg;
                data_2_V_read_1_reg_861_pp0_iter2_reg <= data_2_V_read_1_reg_861_pp0_iter1_reg;
                data_3_V_read_1_reg_855_pp0_iter2_reg <= data_3_V_read_1_reg_855_pp0_iter1_reg;
                data_4_V_read_1_reg_848_pp0_iter2_reg <= data_4_V_read_1_reg_848_pp0_iter1_reg;
                exp_res_0_V_reg_945_pp0_iter6_reg <= exp_res_0_V_reg_945;
                exp_res_0_V_reg_945_pp0_iter7_reg <= exp_res_0_V_reg_945_pp0_iter6_reg;
                exp_res_0_V_reg_945_pp0_iter8_reg <= exp_res_0_V_reg_945_pp0_iter7_reg;
                exp_res_0_V_reg_945_pp0_iter9_reg <= exp_res_0_V_reg_945_pp0_iter8_reg;
                exp_res_1_V_reg_951_pp0_iter6_reg <= exp_res_1_V_reg_951;
                exp_res_1_V_reg_951_pp0_iter7_reg <= exp_res_1_V_reg_951_pp0_iter6_reg;
                exp_res_1_V_reg_951_pp0_iter8_reg <= exp_res_1_V_reg_951_pp0_iter7_reg;
                exp_res_1_V_reg_951_pp0_iter9_reg <= exp_res_1_V_reg_951_pp0_iter8_reg;
                exp_res_2_V_reg_957_pp0_iter6_reg <= exp_res_2_V_reg_957;
                exp_res_2_V_reg_957_pp0_iter7_reg <= exp_res_2_V_reg_957_pp0_iter6_reg;
                exp_res_2_V_reg_957_pp0_iter8_reg <= exp_res_2_V_reg_957_pp0_iter7_reg;
                exp_res_2_V_reg_957_pp0_iter9_reg <= exp_res_2_V_reg_957_pp0_iter8_reg;
                exp_res_3_V_reg_974_pp0_iter7_reg <= exp_res_3_V_reg_974;
                exp_res_3_V_reg_974_pp0_iter8_reg <= exp_res_3_V_reg_974_pp0_iter7_reg;
                exp_res_3_V_reg_974_pp0_iter9_reg <= exp_res_3_V_reg_974_pp0_iter8_reg;
                exp_res_4_V_reg_968_pp0_iter6_reg <= exp_res_4_V_reg_968;
                exp_res_4_V_reg_968_pp0_iter7_reg <= exp_res_4_V_reg_968_pp0_iter6_reg;
                exp_res_4_V_reg_968_pp0_iter8_reg <= exp_res_4_V_reg_968_pp0_iter7_reg;
                exp_res_4_V_reg_968_pp0_iter9_reg <= exp_res_4_V_reg_968_pp0_iter8_reg;
                inv_exp_sum_V_reg_1000 <= invert_table2_q0;
                mul_ln1118_1_reg_1044 <= grp_fu_824_p2;
                mul_ln1118_2_reg_1049 <= grp_fu_830_p2;
                mul_ln1118_3_reg_1054 <= grp_fu_836_p2;
                mul_ln1118_4_reg_1059 <= grp_fu_842_p2;
                mul_ln1118_reg_1039 <= grp_fu_818_p2;
                x_max_V_reg_895 <= x_max_V_fu_245_p3;
                y_V_1_reg_905 <= y_V_1_fu_589_p3;
                y_V_2_reg_910 <= y_V_2_fu_623_p3;
                y_V_3_reg_915 <= y_V_3_fu_657_p3;
                y_V_3_reg_915_pp0_iter4_reg <= y_V_3_reg_915;
                y_V_4_reg_920 <= y_V_4_fu_691_p3;
                y_V_5_reg_990 <= exp_sum_V_fu_731_p2(17 downto 8);
                y_V_reg_900 <= y_V_fu_555_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                data_0_V_read_1_reg_873 <= data_0_V_read;
                data_0_V_read_1_reg_873_pp0_iter1_reg <= data_0_V_read_1_reg_873;
                data_1_V_read_1_reg_867 <= data_1_V_read;
                data_1_V_read_1_reg_867_pp0_iter1_reg <= data_1_V_read_1_reg_867;
                data_2_V_read_1_reg_861 <= data_2_V_read;
                data_2_V_read_1_reg_861_pp0_iter1_reg <= data_2_V_read_1_reg_861;
                data_3_V_read_1_reg_855 <= data_3_V_read;
                data_3_V_read_1_reg_855_pp0_iter1_reg <= data_3_V_read_1_reg_855;
                data_4_V_read_1_reg_848 <= data_4_V_read;
                data_4_V_read_1_reg_848_pp0_iter1_reg <= data_4_V_read_1_reg_848;
                icmp_ln1496_1_reg_884 <= icmp_ln1496_1_fu_211_p2;
                icmp_ln1496_reg_879 <= icmp_ln1496_fu_205_p2;
                select_ln85_2_reg_889 <= select_ln85_2_fu_233_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                exp_res_0_V_reg_945 <= exp_table1_q0;
                exp_res_1_V_reg_951 <= exp_table1_q1;
                exp_res_2_V_reg_957 <= exp_table1_q2;
                exp_res_4_V_reg_968 <= exp_table1_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                exp_res_3_V_reg_974 <= exp_table1_q4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_1_fu_723_p2 <= std_logic_vector(signed(exp_res_4_V_reg_968) + signed(exp_res_2_V_reg_957));
    add_ln703_2_fu_727_p2 <= std_logic_vector(signed(exp_res_3_V_reg_974) + signed(add_ln703_1_reg_985));
    add_ln703_fu_719_p2 <= std_logic_vector(signed(exp_res_1_V_reg_951) + signed(exp_res_0_V_reg_945));
    and_ln786_1_fu_340_p2 <= (xor_ln786_1_fu_334_p2 and tmp_4_fu_318_p3);
    and_ln786_2_fu_395_p2 <= (xor_ln786_2_fu_389_p2 and tmp_8_fu_373_p3);
    and_ln786_3_fu_450_p2 <= (xor_ln786_3_fu_444_p2 and tmp_11_fu_428_p3);
    and_ln786_4_fu_505_p2 <= (xor_ln786_4_fu_499_p2 and tmp_13_fu_483_p3);
    and_ln786_fu_285_p2 <= (xor_ln786_fu_279_p2 and tmp_fu_263_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_sum_V_fu_731_p2 <= std_logic_vector(unsigned(add_ln703_reg_980) + unsigned(add_ln703_2_fu_727_p2));
    exp_table1_address0 <= zext_ln306_fu_699_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln306_1_fu_703_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln306_2_fu_707_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln306_4_fu_711_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln306_3_fu_715_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_818_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_818_ce <= ap_const_logic_1;
        else 
            grp_fu_818_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_818_p1 <= sext_ln1116_fu_750_p1(18 - 1 downto 0);

    grp_fu_824_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_824_ce <= ap_const_logic_1;
        else 
            grp_fu_824_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_824_p1 <= sext_ln1116_fu_750_p1(18 - 1 downto 0);

    grp_fu_830_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_830_ce <= ap_const_logic_1;
        else 
            grp_fu_830_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_830_p1 <= sext_ln1116_fu_750_p1(18 - 1 downto 0);

    grp_fu_836_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_836_ce <= ap_const_logic_1;
        else 
            grp_fu_836_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_836_p1 <= sext_ln1116_fu_750_p1(18 - 1 downto 0);

    grp_fu_842_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_842_ce <= ap_const_logic_1;
        else 
            grp_fu_842_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_842_p1 <= sext_ln1116_fu_750_p1(18 - 1 downto 0);
    icmp_ln1496_1_fu_211_p0 <= data_2_V_read;
    icmp_ln1496_1_fu_211_p1 <= data_3_V_read;
    icmp_ln1496_1_fu_211_p2 <= "1" when (signed(icmp_ln1496_1_fu_211_p0) < signed(icmp_ln1496_1_fu_211_p1)) else "0";
    icmp_ln1496_2_fu_227_p2 <= "1" when (signed(select_ln85_fu_217_p3) < signed(select_ln85_1_fu_222_p3)) else "0";
    icmp_ln1496_3_fu_241_p2 <= "1" when (signed(select_ln85_2_reg_889) < signed(data_4_V_read_1_reg_848_pp0_iter1_reg)) else "0";
    icmp_ln1496_fu_205_p0 <= data_0_V_read;
    icmp_ln1496_fu_205_p1 <= data_1_V_read;
    icmp_ln1496_fu_205_p2 <= "1" when (signed(icmp_ln1496_fu_205_p0) < signed(icmp_ln1496_fu_205_p1)) else "0";
    invert_table2_address0 <= zext_ln314_fu_746_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln340_1_fu_358_p2 <= (xor_ln340_1_fu_352_p2 or tmp_6_fu_326_p3);
    or_ln340_2_fu_413_p2 <= (xor_ln340_2_fu_407_p2 or tmp_10_fu_381_p3);
    or_ln340_3_fu_468_p2 <= (xor_ln340_3_fu_462_p2 or tmp_12_fu_436_p3);
    or_ln340_4_fu_523_p2 <= (xor_ln340_4_fu_517_p2 or tmp_14_fu_491_p3);
    or_ln340_fu_303_p2 <= (xor_ln340_fu_297_p2 or tmp_2_fu_271_p3);
    res_0_V <= mul_ln1118_reg_1039(31 downto 16);

    res_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= mul_ln1118_1_reg_1044(31 downto 16);

    res_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= mul_ln1118_2_reg_1049(31 downto 16);

    res_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= mul_ln1118_3_reg_1054(31 downto 16);

    res_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= mul_ln1118_4_reg_1059(31 downto 16);

    res_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln340_2_fu_573_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_6_fu_346_p2(0) = '1') else 
        tmp_3_fu_563_p4;
    select_ln340_4_fu_607_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_7_fu_401_p2(0) = '1') else 
        tmp_5_fu_597_p4;
    select_ln340_6_fu_641_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_8_fu_456_p2(0) = '1') else 
        tmp_7_fu_631_p4;
    select_ln340_8_fu_675_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_9_fu_511_p2(0) = '1') else 
        tmp_9_fu_665_p4;
    select_ln340_fu_539_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_5_fu_291_p2(0) = '1') else 
        tmp_1_fu_529_p4;
    select_ln388_1_fu_581_p3 <= 
        ap_const_lv10_200 when (and_ln786_1_fu_340_p2(0) = '1') else 
        tmp_3_fu_563_p4;
    select_ln388_2_fu_615_p3 <= 
        ap_const_lv10_200 when (and_ln786_2_fu_395_p2(0) = '1') else 
        tmp_5_fu_597_p4;
    select_ln388_3_fu_649_p3 <= 
        ap_const_lv10_200 when (and_ln786_3_fu_450_p2(0) = '1') else 
        tmp_7_fu_631_p4;
    select_ln388_4_fu_683_p3 <= 
        ap_const_lv10_200 when (and_ln786_4_fu_505_p2(0) = '1') else 
        tmp_9_fu_665_p4;
    select_ln388_fu_547_p3 <= 
        ap_const_lv10_200 when (and_ln786_fu_285_p2(0) = '1') else 
        tmp_1_fu_529_p4;
    select_ln85_1_fu_222_p3 <= 
        data_3_V_read_1_reg_855 when (icmp_ln1496_1_reg_884(0) = '1') else 
        data_2_V_read_1_reg_861;
    select_ln85_2_fu_233_p3 <= 
        select_ln85_1_fu_222_p3 when (icmp_ln1496_2_fu_227_p2(0) = '1') else 
        select_ln85_fu_217_p3;
    select_ln85_fu_217_p3 <= 
        data_1_V_read_1_reg_867 when (icmp_ln1496_reg_879(0) = '1') else 
        data_0_V_read_1_reg_873;
        sext_ln1116_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(inv_exp_sum_V_reg_1000),32));

        sext_ln703_1_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_reg_895),17));

        sext_ln703_2_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_V_read_1_reg_867_pp0_iter2_reg),17));

        sext_ln703_3_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_V_read_1_reg_861_pp0_iter2_reg),17));

        sext_ln703_4_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_V_read_1_reg_855_pp0_iter2_reg),17));

        sext_ln703_5_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_4_V_read_1_reg_848_pp0_iter2_reg),17));

        sext_ln703_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_V_read_1_reg_873_pp0_iter2_reg),17));

    sub_ln1193_1_fu_312_p2 <= std_logic_vector(signed(sext_ln703_2_fu_309_p1) - signed(sext_ln703_1_fu_254_p1));
    sub_ln1193_2_fu_367_p2 <= std_logic_vector(signed(sext_ln703_3_fu_364_p1) - signed(sext_ln703_1_fu_254_p1));
    sub_ln1193_3_fu_422_p2 <= std_logic_vector(signed(sext_ln703_4_fu_419_p1) - signed(sext_ln703_1_fu_254_p1));
    sub_ln1193_4_fu_477_p2 <= std_logic_vector(signed(sext_ln703_5_fu_474_p1) - signed(sext_ln703_1_fu_254_p1));
    sub_ln1193_fu_257_p2 <= std_logic_vector(signed(sext_ln703_fu_251_p1) - signed(sext_ln703_1_fu_254_p1));
    tmp_10_fu_381_p3 <= sub_ln1193_2_fu_367_p2(15 downto 15);
    tmp_11_fu_428_p3 <= sub_ln1193_3_fu_422_p2(16 downto 16);
    tmp_12_fu_436_p3 <= sub_ln1193_3_fu_422_p2(15 downto 15);
    tmp_13_fu_483_p3 <= sub_ln1193_4_fu_477_p2(16 downto 16);
    tmp_14_fu_491_p3 <= sub_ln1193_4_fu_477_p2(15 downto 15);
    tmp_1_fu_529_p4 <= sub_ln1193_fu_257_p2(15 downto 6);
    tmp_2_fu_271_p3 <= sub_ln1193_fu_257_p2(15 downto 15);
    tmp_3_fu_563_p4 <= sub_ln1193_1_fu_312_p2(15 downto 6);
    tmp_4_fu_318_p3 <= sub_ln1193_1_fu_312_p2(16 downto 16);
    tmp_5_fu_597_p4 <= sub_ln1193_2_fu_367_p2(15 downto 6);
    tmp_6_fu_326_p3 <= sub_ln1193_1_fu_312_p2(15 downto 15);
    tmp_7_fu_631_p4 <= sub_ln1193_3_fu_422_p2(15 downto 6);
    tmp_8_fu_373_p3 <= sub_ln1193_2_fu_367_p2(16 downto 16);
    tmp_9_fu_665_p4 <= sub_ln1193_4_fu_477_p2(15 downto 6);
    tmp_fu_263_p3 <= sub_ln1193_fu_257_p2(16 downto 16);
    x_max_V_fu_245_p3 <= 
        data_4_V_read_1_reg_848_pp0_iter1_reg when (icmp_ln1496_3_fu_241_p2(0) = '1') else 
        select_ln85_2_reg_889;
    xor_ln340_1_fu_352_p2 <= (tmp_4_fu_318_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_407_p2 <= (tmp_8_fu_373_p3 xor ap_const_lv1_1);
    xor_ln340_3_fu_462_p2 <= (tmp_11_fu_428_p3 xor ap_const_lv1_1);
    xor_ln340_4_fu_517_p2 <= (tmp_13_fu_483_p3 xor ap_const_lv1_1);
    xor_ln340_5_fu_291_p2 <= (tmp_fu_263_p3 xor tmp_2_fu_271_p3);
    xor_ln340_6_fu_346_p2 <= (tmp_6_fu_326_p3 xor tmp_4_fu_318_p3);
    xor_ln340_7_fu_401_p2 <= (tmp_8_fu_373_p3 xor tmp_10_fu_381_p3);
    xor_ln340_8_fu_456_p2 <= (tmp_12_fu_436_p3 xor tmp_11_fu_428_p3);
    xor_ln340_9_fu_511_p2 <= (tmp_14_fu_491_p3 xor tmp_13_fu_483_p3);
    xor_ln340_fu_297_p2 <= (tmp_fu_263_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_334_p2 <= (tmp_6_fu_326_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_389_p2 <= (tmp_10_fu_381_p3 xor ap_const_lv1_1);
    xor_ln786_3_fu_444_p2 <= (tmp_12_fu_436_p3 xor ap_const_lv1_1);
    xor_ln786_4_fu_499_p2 <= (tmp_14_fu_491_p3 xor ap_const_lv1_1);
    xor_ln786_fu_279_p2 <= (tmp_2_fu_271_p3 xor ap_const_lv1_1);
    y_V_1_fu_589_p3 <= 
        select_ln340_2_fu_573_p3 when (or_ln340_1_fu_358_p2(0) = '1') else 
        select_ln388_1_fu_581_p3;
    y_V_2_fu_623_p3 <= 
        select_ln340_4_fu_607_p3 when (or_ln340_2_fu_413_p2(0) = '1') else 
        select_ln388_2_fu_615_p3;
    y_V_3_fu_657_p3 <= 
        select_ln340_6_fu_641_p3 when (or_ln340_3_fu_468_p2(0) = '1') else 
        select_ln388_3_fu_649_p3;
    y_V_4_fu_691_p3 <= 
        select_ln340_8_fu_675_p3 when (or_ln340_4_fu_523_p2(0) = '1') else 
        select_ln388_4_fu_683_p3;
    y_V_fu_555_p3 <= 
        select_ln340_fu_539_p3 when (or_ln340_fu_303_p2(0) = '1') else 
        select_ln388_fu_547_p3;
    zext_ln306_1_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_905),64));
    zext_ln306_2_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_910),64));
    zext_ln306_3_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_915_pp0_iter4_reg),64));
    zext_ln306_4_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_reg_920),64));
    zext_ln306_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_900),64));
    zext_ln314_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_reg_990),64));
end behav;
